Testing drawCard.
RANDOM TESTS.
ALL TESTS OK
File 'dominion.c'
Lines executed:7.27% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     5995:    8:int compare(const void* a, const void* b) {
     5995:    9:  if (*(int*)a > *(int*)b)
     3041:   10:    return 1;
     2954:   11:  if (*(int*)a < *(int*)b)
     2954:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:void playVillage(int currentPlayer, struct gameState* state, int handPos){
        -:   17:    //+1 Card
    #####:   18:      drawCard(currentPlayer, state);
        -:   19:			
        -:   20:      //+2 Actions
    #####:   21:      state->numActions = state->numActions + 2;
        -:   22:			
        -:   23:      //discard played card from hand
    #####:   24:      discardCard(handPos, currentPlayer, state, 0);
    #####:   25:}
        -:   26:
    #####:   27:void playSmithy(int currentPlayer, struct gameState* state, int handPos){
        -:   28:    int i;
    #####:   29:    for (i = 1; i < 3; i++)
        -:   30:	{
    #####:   31:	  drawCard(currentPlayer, state);
        -:   32:	}
        -:   33:
        -:   34:			
        -:   35:      //discard card from hand
    #####:   36:      discardCard(handPos, currentPlayer, state, 0);
        -:   37: 
        -:   38:
    #####:   39:}
    #####:   40:void playAdventurer(int currentPlayer, struct gameState* state, int handPos){
    #####:   41:int drawntreasure = 0;
        -:   42:int cardDrawn;
        -:   43:int temphand[MAX_HAND];
    #####:   44:int z = 0;
    #####:   45:while(drawntreasure<2){
    #####:   46:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   47:	  shuffle(currentPlayer, state);
        -:   48:	}
    #####:   49:	drawCard(currentPlayer, state);
        -:   50:
    #####:   51:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   52:	if (cardDrawn == copper || cardDrawn == silver)
    #####:   53:	  drawntreasure++;
        -:   54:	else{
    #####:   55:	  temphand[z]=cardDrawn;
    #####:   56:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   57:	  z++;
        -:   58:	}
        -:   59:      }
    #####:   60:      while(z-1>=0){
    #####:   61:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   62:	z=z-1;
    #####:   63:      }}
        -:   64:
    #####:   65:void playBaron( int currentPlayer, struct gameState* state, int handPos, int choice1) {
    #####:   66: state->numBuys++;//Increase buys by 1!
    #####:   67:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:   68:	int p = 1;//Iterator for hand!
    #####:   69:	int card_not_discarded = 1;//Flag for discard set!
    #####:   70:	while(card_not_discarded){
    #####:   71:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:   72:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:   73:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:   74:	    state->discardCount[currentPlayer]++;
    #####:   75:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:   76:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:   77:	    }
    #####:   78:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:   79:	    state->handCount[currentPlayer]--;
    #####:   80:	    card_not_discarded = 0;//Exit the loop
        -:   81:	  }
    #####:   82:	  else if (p > state->handCount[currentPlayer]){
        -:   83:	    if(DEBUG) {
        -:   84:	      printf("No estate cards in your hand, invalid choice\n");
        -:   85:	      printf("Must gain an estate if there are any\n");
        -:   86:	    }
    #####:   87:	    if (supplyCount(estate, state) > 0){
    #####:   88:	      gainCard(estate, state, 0, currentPlayer);
    #####:   89:	      state->supplyCount[estate]--;//Decrement estates
    #####:   90:	      if (supplyCount(estate, state) == 0){
    #####:   91:		isGameOver(state);
        -:   92:	      }
        -:   93:	    }
    #####:   94:	    card_not_discarded = 0;//Exit the loop
        -:   95:	  }
        -:   96:			    
        -:   97:	  else{
    #####:   98:	    p++;//Next card
        -:   99:	  }
        -:  100:	}
        -:  101:      }
        -:  102:			    
        -:  103:      else{
    #####:  104:	if (supplyCount(estate, state) > 0){
    #####:  105:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  106:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  107:	  if (supplyCount(estate, state) == 0){
    #####:  108:	    isGameOver(state);
        -:  109:	  }
        -:  110:	}
        -:  111:      }
        -:  112:	    
        -:  113:
    #####:  114:}
        -:  115:
    #####:  116:void playSteward(int currentPlayer, struct gameState* state, int handPos, int choice1, int choice2, int choice3){
    #####:  117:   if (choice1 == 1)
        -:  118:	{
        -:  119:	  //+2 cards
    #####:  120:	  drawCard(currentPlayer, state);
    #####:  121:	  drawCard(currentPlayer, state);
        -:  122:	}
    #####:  123:      else if (choice1 == 2)
        -:  124:	{
        -:  125:	  //+2 coins
    #####:  126:	  state->coins = state->coins + 2;
        -:  127:	}
        -:  128:      else
        -:  129:	{
        -:  130:	  
    #####:  131:    state->coins = state->coins + 2;
        -:  132:    //trash 2 cards in hand
    #####:  133:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  134:	  discardCard(choice3, currentPlayer, state, 1);
        -:  135:	}
        -:  136:			
        -:  137:      //discard card from hand
    #####:  138:      discardCard(handPos, currentPlayer, state, 1);
    #####:  139:}
        -:  140:
        -:  141:
    #####:  142:struct gameState* newGame() {
    #####:  143:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  144:  return g;
        -:  145:}
        -:  146:
    #####:  147:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  148:		  int k8, int k9, int k10) {
    #####:  149:  int* k = malloc(10 * sizeof(int));
    #####:  150:  k[0] = k1;
    #####:  151:  k[1] = k2;
    #####:  152:  k[2] = k3;
    #####:  153:  k[3] = k4;
    #####:  154:  k[4] = k5;
    #####:  155:  k[5] = k6;
    #####:  156:  k[6] = k7;
    #####:  157:  k[7] = k8;
    #####:  158:  k[8] = k9;
    #####:  159:  k[9] = k10;
    #####:  160:  return k;
        -:  161:}
        -:  162:
    #####:  163:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  164:		   struct gameState *state) {
        -:  165:
        -:  166:  int i;
        -:  167:  int j;
        -:  168:  int it;			
        -:  169:  //set up random number generator
    #####:  170:  SelectStream(1);
    #####:  171:  PutSeed((long)randomSeed);
        -:  172:  
        -:  173:  //check number of players
    #####:  174:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  175:    {
    #####:  176:      return -1;
        -:  177:    }
        -:  178:
        -:  179:  //set number of players
    #####:  180:  state->numPlayers = numPlayers;
        -:  181:
        -:  182:  //check selected kingdom cards are different
    #####:  183:  for (i = 0; i < 10; i++)
        -:  184:    {
    #####:  185:      for (j = 0; j < 10; j++)
        -:  186:        {
    #####:  187:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  188:	    {
    #####:  189:	      return -1;
        -:  190:	    }
        -:  191:        }
        -:  192:    }
        -:  193:
        -:  194:
        -:  195:  //initialize supply
        -:  196:  ///////////////////////////////
        -:  197:
        -:  198:  //set number of Curse cards
    #####:  199:  if (numPlayers == 2)
        -:  200:    {
    #####:  201:      state->supplyCount[curse] = 10;
        -:  202:    }
    #####:  203:  else if (numPlayers == 3)
        -:  204:    {
    #####:  205:      state->supplyCount[curse] = 20;
        -:  206:    }
        -:  207:  else
        -:  208:    {
    #####:  209:      state->supplyCount[curse] = 30;
        -:  210:    }
        -:  211:
        -:  212:  //set number of Victory cards
    #####:  213:  if (numPlayers == 2)
        -:  214:    {
    #####:  215:      state->supplyCount[estate] = 8;
    #####:  216:      state->supplyCount[duchy] = 8;
    #####:  217:      state->supplyCount[province] = 8;
        -:  218:    }
        -:  219:  else
        -:  220:    {
    #####:  221:      state->supplyCount[estate] = 12;
    #####:  222:      state->supplyCount[duchy] = 12;
    #####:  223:      state->supplyCount[province] = 12;
        -:  224:    }
        -:  225:
        -:  226:  //set number of Treasure cards
    #####:  227:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  228:  state->supplyCount[silver] = 40;
    #####:  229:  state->supplyCount[gold] = 30;
        -:  230:
        -:  231:  //set number of Kingdom cards
    #####:  232:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  233:    {
    #####:  234:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  235:	{
    #####:  236:	  if (kingdomCards[j] == i)
        -:  237:	    {
        -:  238:	      //check if card is a 'Victory' Kingdom card
    #####:  239:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  240:		{
    #####:  241:		  if (numPlayers == 2){ 
    #####:  242:		    state->supplyCount[i] = 8; 
        -:  243:		  }
    #####:  244:		  else{ state->supplyCount[i] = 12; }
        -:  245:		}
        -:  246:	      else
        -:  247:		{
    #####:  248:		  state->supplyCount[i] = 10;
        -:  249:		}
    #####:  250:	      break;
        -:  251:	    }
        -:  252:	  else    //card is not in the set choosen for the game
        -:  253:	    {
    #####:  254:	      state->supplyCount[i] = -1;
        -:  255:	    }
        -:  256:	}
        -:  257:
        -:  258:    }
        -:  259:
        -:  260:  ////////////////////////
        -:  261:  //supply intilization complete
        -:  262:
        -:  263:  //set player decks
    #####:  264:  for (i = 0; i < numPlayers; i++)
        -:  265:    {
    #####:  266:      state->deckCount[i] = 0;
    #####:  267:      for (j = 0; j < 3; j++)
        -:  268:	{
    #####:  269:	  state->deck[i][j] = estate;
    #####:  270:	  state->deckCount[i]++;
        -:  271:	}
    #####:  272:      for (j = 3; j < 10; j++)
        -:  273:	{
    #####:  274:	  state->deck[i][j] = copper;
    #####:  275:	  state->deckCount[i]++;		
        -:  276:	}
        -:  277:    }
        -:  278:
        -:  279:  //shuffle player decks
    #####:  280:  for (i = 0; i < numPlayers; i++)
        -:  281:    {
    #####:  282:      if ( shuffle(i, state) < 0 )
        -:  283:	{
    #####:  284:	  return -1;
        -:  285:	}
        -:  286:    }
        -:  287:
        -:  288:  //draw player hands
    #####:  289:  for (i = 0; i < numPlayers; i++)
        -:  290:    {  
        -:  291:      //initialize hand size to zero
    #####:  292:      state->handCount[i] = 0;
    #####:  293:      state->discardCount[i] = 0;
        -:  294:      //draw 5 cards
        -:  295:      // for (j = 0; j < 5; j++)
        -:  296:      //	{
        -:  297:      //	  drawCard(i, state);
        -:  298:      //	}
        -:  299:    }
        -:  300:  
        -:  301:  //set embargo tokens to 0 for all supply piles
    #####:  302:  for (i = 0; i <= treasure_map; i++)
        -:  303:    {
    #####:  304:      state->embargoTokens[i] = 0;
        -:  305:    }
        -:  306:
        -:  307:  //initialize first player's turn
    #####:  308:  state->outpostPlayed = 0;
    #####:  309:  state->phase = 0;
    #####:  310:  state->numActions = 1;
    #####:  311:  state->numBuys = 1;
    #####:  312:  state->playedCardCount = 0;
    #####:  313:  state->whoseTurn = 0;
    #####:  314:  state->handCount[state->whoseTurn] = 0;
        -:  315:  //int it; move to top
        -:  316:
        -:  317:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  318:  for (it = 0; it < 5; it++){
    #####:  319:    drawCard(state->whoseTurn, state);
        -:  320:  }
        -:  321:
    #####:  322:  updateCoins(state->whoseTurn, state, 0);
        -:  323:
    #####:  324:  return 0;
        -:  325:}
        -:  326:
        2:  327:int shuffle(int player, struct gameState *state) {
        -:  328: 
        -:  329:
        -:  330:  int newDeck[MAX_DECK];
        2:  331:  int newDeckPos = 0;
        -:  332:  int card;
        -:  333:  int i;
        -:  334:
        2:  335:  if (state->deckCount[player] < 1)
    #####:  336:    return -1;
        2:  337:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  338:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  339:
      813:  340:  while (state->deckCount[player] > 0) {
      809:  341:    card = floor(Random() * state->deckCount[player]);
      809:  342:    newDeck[newDeckPos] = state->deck[player][card];
      809:  343:    newDeckPos++;
    81722:  344:    for (i = card; i < state->deckCount[player]-1; i++) {
    80913:  345:      state->deck[player][i] = state->deck[player][i+1];
        -:  346:    }
      809:  347:    state->deckCount[player]--;
        -:  348:  }
      811:  349:  for (i = 0; i < newDeckPos; i++) {
      809:  350:    state->deck[player][i] = newDeck[i];
      809:  351:    state->deckCount[player]++;
        -:  352:  }
        -:  353:
        2:  354:  return 0;
        -:  355:}
        -:  356:
    #####:  357:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  358:{	
        -:  359:  int card;
    #####:  360:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  361:
        -:  362:  //check if it is the right phase
    #####:  363:  if (state->phase != 0)
        -:  364:    {
    #####:  365:      return -1;
        -:  366:    }
        -:  367:	
        -:  368:  //check if player has enough actions
    #####:  369:  if ( state->numActions < 1 )
        -:  370:    {
    #####:  371:      return -1;
        -:  372:    }
        -:  373:	
        -:  374:  //get card played
    #####:  375:  card = handCard(handPos, state);
        -:  376:	
        -:  377:  //check if selected card is an action
    #####:  378:  if ( card < adventurer || card > treasure_map )
        -:  379:    {
    #####:  380:      return -1;
        -:  381:    }
        -:  382:	
        -:  383:  //play card
    #####:  384:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  385:    {
    #####:  386:      return -1;
        -:  387:    }
        -:  388:	
        -:  389:  //reduce number of actions
    #####:  390:  state->numActions--;
        -:  391:
        -:  392:  //update coins (Treasure cards may be added with card draws)
    #####:  393:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  394:	
    #####:  395:  return 0;
        -:  396:}
        -:  397:
    #####:  398:int buyCard(int supplyPos, struct gameState *state) {
        -:  399:  int who;
        -:  400:  if (DEBUG){
        -:  401:    printf("Entering buyCard...\n");
        -:  402:  }
        -:  403:
        -:  404:  // I don't know what to do about the phase thing.
        -:  405:
    #####:  406:  who = state->whoseTurn;
        -:  407:
    #####:  408:  if (state->numBuys < 1){
        -:  409:    if (DEBUG)
        -:  410:      printf("You do not have any buys left\n");
    #####:  411:    return -1;
    #####:  412:  } else if (supplyCount(supplyPos, state) <1){
        -:  413:    if (DEBUG)
        -:  414:      printf("There are not any of that type of card left\n");
    #####:  415:    return -1;
    #####:  416:  } else if (state->coins < getCost(supplyPos)){
        -:  417:    if (DEBUG) 
        -:  418:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  419:    return -1;
        -:  420:  } else {
    #####:  421:    state->phase=1;
        -:  422:    //state->supplyCount[supplyPos]--;
    #####:  423:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  424:  
    #####:  425:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  426:    state->numBuys--;
        -:  427:    if (DEBUG)
        -:  428:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  429:  }
        -:  430:
        -:  431:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  432:  //state->discardCount[who]++;
        -:  433:    
    #####:  434:  return 0;
        -:  435:}
        -:  436:
    #####:  437:int numHandCards(struct gameState *state) {
    #####:  438:  return state->handCount[ whoseTurn(state) ];
        -:  439:}
        -:  440:
    #####:  441:int handCard(int handPos, struct gameState *state) {
    #####:  442:  int currentPlayer = whoseTurn(state);
    #####:  443:  return state->hand[currentPlayer][handPos];
        -:  444:}
        -:  445:
    #####:  446:int supplyCount(int card, struct gameState *state) {
    #####:  447:  return state->supplyCount[card];
        -:  448:}
        -:  449:
    #####:  450:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  451:  int i;
    #####:  452:  int count = 0;
        -:  453:
    #####:  454:  for (i = 0; i < state->deckCount[player]; i++)
        -:  455:    {
    #####:  456:      if (state->deck[player][i] == card) count++;
        -:  457:    }
        -:  458:
    #####:  459:  for (i = 0; i < state->handCount[player]; i++)
        -:  460:    {
    #####:  461:      if (state->hand[player][i] == card) count++;
        -:  462:    }
        -:  463:
    #####:  464:  for (i = 0; i < state->discardCount[player]; i++)
        -:  465:    {
    #####:  466:      if (state->discard[player][i] == card) count++;
        -:  467:    }
        -:  468:
    #####:  469:  return count;
        -:  470:}
        -:  471:
    #####:  472:int whoseTurn(struct gameState *state) {
    #####:  473:  return state->whoseTurn;
        -:  474:}
        -:  475:
    #####:  476:int endTurn(struct gameState *state) {
        -:  477:  int k;
        -:  478:  int i;
    #####:  479:  int currentPlayer = whoseTurn(state);
        -:  480:  
        -:  481:  //Discard hand
    #####:  482:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  483:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  484:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  485:  }
    #####:  486:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  487:    
        -:  488:  //Code for determining the player
    #####:  489:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  490:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  491:  }
        -:  492:  else{
    #####:  493:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  494:  }
        -:  495:
    #####:  496:  state->outpostPlayed = 0;
    #####:  497:  state->phase = 0;
    #####:  498:  state->numActions = 1;
    #####:  499:  state->coins = 0;
    #####:  500:  state->numBuys = 1;
    #####:  501:  state->playedCardCount = 0;
    #####:  502:  state->handCount[state->whoseTurn] = 0;
        -:  503:
        -:  504:  //int k; move to top
        -:  505:  //Next player draws hand
    #####:  506:  for (k = 0; k < 5; k++){
    #####:  507:    drawCard(state->whoseTurn, state);//Draw a card
        -:  508:  }
        -:  509:
        -:  510:  //Update money
    #####:  511:  updateCoins(state->whoseTurn, state , 0);
        -:  512:
    #####:  513:  return 0;
        -:  514:}
        -:  515:
    #####:  516:int isGameOver(struct gameState *state) {
        -:  517:  int i;
        -:  518:  int j;
        -:  519:	
        -:  520:  //if stack of Province cards is empty, the game ends
    #####:  521:  if (state->supplyCount[province] == 0)
        -:  522:    {
    #####:  523:      return 1;
        -:  524:    }
        -:  525:
        -:  526:  //if three supply pile are at 0, the game ends
    #####:  527:  j = 0;
    #####:  528:  for (i = 0; i < 25; i++)
        -:  529:    {
    #####:  530:      if (state->supplyCount[i] == 0)
        -:  531:	{
    #####:  532:	  j++;
        -:  533:	}
        -:  534:    }
    #####:  535:  if ( j >= 3)
        -:  536:    {
    #####:  537:      return 1;
        -:  538:    }
        -:  539:
    #####:  540:  return 0;
        -:  541:}
        -:  542:
    #####:  543:int scoreFor (int player, struct gameState *state) {
        -:  544:
        -:  545:  int i;
    #####:  546:  int score = 0;
        -:  547:  //score from hand
    #####:  548:  for (i = 0; i < state->handCount[player]; i++)
        -:  549:    {
    #####:  550:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  551:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  552:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  553:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  554:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  555:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  556:    }
        -:  557:
        -:  558:  //score from discard
    #####:  559:  for (i = 0; i < state->discardCount[player]; i++)
        -:  560:    {
    #####:  561:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  562:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  563:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  564:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  565:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  566:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  567:    }
        -:  568:
        -:  569:  //score from deck
    #####:  570:  for (i = 0; i < state->discardCount[player]; i++)
        -:  571:    {
    #####:  572:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  573:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  574:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  575:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  576:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  577:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  578:    }
        -:  579:
    #####:  580:  return score;
        -:  581:}
        -:  582:
    #####:  583:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  584:  int i;	
        -:  585:  int j;
        -:  586:  int highScore;
        -:  587:  int currentPlayer;
        -:  588:
        -:  589:  //get score for each player
    #####:  590:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  591:    {
        -:  592:      //set unused player scores to -9999
    #####:  593:      if (i >= state->numPlayers)
        -:  594:	{
    #####:  595:	  players[i] = -9999;
        -:  596:	}
        -:  597:      else
        -:  598:	{
    #####:  599:	  players[i] = scoreFor (i, state);
        -:  600:	}
        -:  601:    }
        -:  602:
        -:  603:  //find highest score
    #####:  604:  j = 0;
    #####:  605:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  606:    {
    #####:  607:      if (players[i] > players[j])
        -:  608:	{
    #####:  609:	  j = i;
        -:  610:	}
        -:  611:    }
    #####:  612:  highScore = players[j];
        -:  613:
        -:  614:  //add 1 to players who had less turns
    #####:  615:  currentPlayer = whoseTurn(state);
    #####:  616:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  617:    {
    #####:  618:      if ( players[i] == highScore && i > currentPlayer )
        -:  619:	{
    #####:  620:	  players[i]++;
        -:  621:	}
        -:  622:    }
        -:  623:
        -:  624:  //find new highest score
    #####:  625:  j = 0;
    #####:  626:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  627:    {
    #####:  628:      if ( players[i] > players[j] )
        -:  629:	{
    #####:  630:	  j = i;
        -:  631:	}
        -:  632:    }
    #####:  633:  highScore = players[j];
        -:  634:
        -:  635:  //set winners in array to 1 and rest to 0
    #####:  636:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  637:    {
    #####:  638:      if ( players[i] == highScore )
        -:  639:	{
    #####:  640:	  players[i] = 1;
        -:  641:	}
        -:  642:      else
        -:  643:	{
    #####:  644:	  players[i] = 0;
        -:  645:	}
        -:  646:    }
        -:  647:
    #####:  648:  return 0;
        -:  649:}
        -:  650:
     2000:  651:int drawCard(int player, struct gameState *state)
        -:  652:{	int count;
        -:  653:  int deckCounter;
     2000:  654:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  655:    
        -:  656:    //Step 1 Shuffle the discard pile back into a deck
        -:  657:    int i;
        -:  658:    //Move discard to deck
      811:  659:    for (i = 0; i < state->discardCount[player];i++){
      809:  660:      state->deck[player][i] = state->discard[player][i];
      809:  661:      state->discard[player][i] = -1;
        -:  662:    }
        -:  663:
        2:  664:    state->deckCount[player] = state->discardCount[player];
        2:  665:    state->discardCount[player] = 0;//Reset discard
        -:  666:
        -:  667:    //Shufffle the deck
        2:  668:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  669:   
        -:  670:    if (DEBUG){//Debug statements
        -:  671:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  672:    }
        -:  673:    
        2:  674:    state->discardCount[player] = 0;
        -:  675:
        -:  676:    //Step 2 Draw Card
        2:  677:    count = state->handCount[player];//Get current player's hand count
        -:  678:    
        -:  679:    if (DEBUG){//Debug statements
        -:  680:      printf("Current hand count: %d\n", count);
        -:  681:    }
        -:  682:    
        2:  683:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  684:
        2:  685:    if (deckCounter == 0)
    #####:  686:      return -1;
        -:  687:
        2:  688:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  689:    state->deckCount[player]--;
        2:  690:    state->handCount[player]++;//Increment hand count
        -:  691:  }
        -:  692:
        -:  693:  else{
     1998:  694:    int count = state->handCount[player];//Get current hand count for player
        -:  695:    int deckCounter;
        -:  696:    if (DEBUG){//Debug statements
        -:  697:      printf("Current hand count: %d\n", count);
        -:  698:    }
        -:  699:
     1998:  700:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1998:  701:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1998:  702:    state->deckCount[player]--;
     1998:  703:    state->handCount[player]++;//Increment hand count
        -:  704:  }
        -:  705:
     2000:  706:  return 0;
        -:  707:}
        -:  708:
    #####:  709:int getCost(int cardNumber)
        -:  710:{
    #####:  711:  switch( cardNumber ) 
        -:  712:    {
        -:  713:    case curse:
    #####:  714:      return 0;
        -:  715:    case estate:
    #####:  716:      return 2;
        -:  717:    case duchy:
    #####:  718:      return 5;
        -:  719:    case province:
    #####:  720:      return 8;
        -:  721:    case copper:
    #####:  722:      return 0;
        -:  723:    case silver:
    #####:  724:      return 3;
        -:  725:    case gold:
    #####:  726:      return 6;
        -:  727:    case adventurer:
    #####:  728:      return 6;
        -:  729:    case council_room:
    #####:  730:      return 5;
        -:  731:    case feast:
    #####:  732:      return 4;
        -:  733:    case gardens:
    #####:  734:      return 4;
        -:  735:    case mine:
    #####:  736:      return 5;
        -:  737:    case remodel:
    #####:  738:      return 4;
        -:  739:    case smithy:
    #####:  740:      return 4;
        -:  741:    case village:
    #####:  742:      return 3;
        -:  743:    case baron:
    #####:  744:      return 4;
        -:  745:    case great_hall:
    #####:  746:      return 3;
        -:  747:    case minion:
    #####:  748:      return 5;
        -:  749:    case steward:
    #####:  750:      return 3;
        -:  751:    case tribute:
    #####:  752:      return 5;
        -:  753:    case ambassador:
    #####:  754:      return 3;
        -:  755:    case cutpurse:
    #####:  756:      return 4;
        -:  757:    case embargo: 
    #####:  758:      return 2;
        -:  759:    case outpost:
    #####:  760:      return 5;
        -:  761:    case salvager:
    #####:  762:      return 4;
        -:  763:    case sea_hag:
    #####:  764:      return 4;
        -:  765:    case treasure_map:
    #####:  766:      return 4;
        -:  767:    }
        -:  768:	
    #####:  769:  return -1;
        -:  770:}
        -:  771:
    #####:  772:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  773:{
        -:  774:  int i;
        -:  775:  int j;
        -:  776:  int k;
        -:  777:  int x;
        -:  778:  int index;
    #####:  779:  int currentPlayer = whoseTurn(state);
    #####:  780:  int nextPlayer = currentPlayer + 1;
        -:  781:
    #####:  782:  int tributeRevealedCards[2] = {-1, -1};
        -:  783:  int temphand[MAX_HAND];// moved above the if statement
        -:  784:  
        -:  785:  
        -:  786:  
    #####:  787:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  788:    nextPlayer = 0;
        -:  789:  }
        -:  790:  
        -:  791:	
        -:  792:  //uses switch to select card and perform actions
    #####:  793:  switch( card ) 
        -:  794:    {
        -:  795:    case adventurer:
    #####:  796:      playAdventurer(currentPlayer, state, handPos);
    #####:  797:      return 0;
        -:  798:			
        -:  799:    case council_room:
        -:  800:      //+4 Cards
    #####:  801:      for (i = 0; i < 4; i++)
        -:  802:	{
    #####:  803:	  drawCard(currentPlayer, state);
        -:  804:	}
        -:  805:			
        -:  806:      //+1 Buy
    #####:  807:      state->numBuys++;
        -:  808:			
        -:  809:      //Each other player draws a card
    #####:  810:      for (i = 0; i < state->numPlayers; i++)
        -:  811:	{
    #####:  812:	  if ( i != currentPlayer )
        -:  813:	    {
    #####:  814:	      drawCard(i, state);
        -:  815:	    }
        -:  816:	}
        -:  817:			
        -:  818:      //put played card in played card pile
    #####:  819:      discardCard(handPos, currentPlayer, state, 0);
        -:  820:			
    #####:  821:      return 0;
        -:  822:			
        -:  823:    case feast:
        -:  824:      //gain card with cost up to 5
        -:  825:      //Backup hand
    #####:  826:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  827:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  828:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  829:      }
        -:  830:      //Backup hand
        -:  831:
        -:  832:      //Update Coins for Buy
    #####:  833:      updateCoins(currentPlayer, state, 5);
    #####:  834:      x = 1;//Condition to loop on
    #####:  835:      while( x == 1) {//Buy one card
    #####:  836:	if (supplyCount(choice1, state) <= 0){
        -:  837:	  if (DEBUG)
        -:  838:	    printf("None of that card left, sorry!\n");
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  842:	  }
        -:  843:	}
    #####:  844:	else if (state->coins < getCost(choice1)){
    #####:  845:	  printf("That card is too expensive!\n");
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  849:	  }
        -:  850:	}
        -:  851:	else{
        -:  852:
        -:  853:	  if (DEBUG){
        -:  854:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  855:	  }
        -:  856:
    #####:  857:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  858:	  x = 0;//No more buying cards
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  862:	  }
        -:  863:
        -:  864:	}
        -:  865:      }     
        -:  866:
        -:  867:      //Reset Hand
    #####:  868:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  869:	state->hand[currentPlayer][i] = temphand[i];
    #####:  870:	temphand[i] = -1;
        -:  871:      }
        -:  872:      //Reset Hand
        -:  873:      			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case gardens:
        -:  877:      
    #####:  878:      return -1;
        -:  879:			
        -:  880:    case mine:
    #####:  881:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  882:
    #####:  883:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  884:	{
    #####:  885:	  return -1;
        -:  886:	}
        -:  887:		
    #####:  888:      if (choice2 > treasure_map || choice2 < curse)
        -:  889:	{
    #####:  890:	  return -1;
        -:  891:	}
        -:  892:
    #####:  893:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  894:	{
    #####:  895:	  return -1;
        -:  896:	}
        -:  897:
    #####:  898:      gainCard(choice2, state, 2, currentPlayer);
        -:  899:
        -:  900:      //discard card from hand
    #####:  901:      discardCard(handPos, currentPlayer, state, 0);
        -:  902:
        -:  903:      //discard trashed card
    #####:  904:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  905:	{
    #####:  906:	  if (state->hand[currentPlayer][i] == j)
        -:  907:	    {
    #####:  908:	      discardCard(i, currentPlayer, state, 0);			
    #####:  909:	      break;
        -:  910:	    }
        -:  911:	}
        -:  912:			
    #####:  913:      return 0;
        -:  914:			
        -:  915:    case remodel:
    #####:  916:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  917:
    #####:  918:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  919:	{
    #####:  920:	  return -1;
        -:  921:	}
        -:  922:
    #####:  923:      gainCard(choice2, state, 0, currentPlayer);
        -:  924:
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
        -:  927:
        -:  928:      //discard trashed card
    #####:  929:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  930:	{
    #####:  931:	  if (state->hand[currentPlayer][i] == j)
        -:  932:	    {
    #####:  933:	      discardCard(i, currentPlayer, state, 0);			
    #####:  934:	      break;
        -:  935:	    }
        -:  936:	}
        -:  937:
        -:  938:
    #####:  939:      return 0;
        -:  940:		
        -:  941:    case smithy:
        -:  942:      //+3 Cards
    #####:  943:      playSmithy(currentPlayer, state, handPos);
    #####:  944:      return 0;
        -:  945:
        -:  946:    case village:
    #####:  947:      playVillage(currentPlayer, state, handPos);
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case baron:
    #####:  951:     playBaron(currentPlayer, state, handPos, choice1);
        -:  952:      
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case great_hall:
        -:  956:      //+1 Card
    #####:  957:      drawCard(currentPlayer, state);
        -:  958:			
        -:  959:      //+1 Actions
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case minion:
        -:  967:      //+1 action
    #####:  968:      state->numActions++;
        -:  969:			
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
        -:  972:			
    #####:  973:      if (choice1)		//+2 coins
        -:  974:	{
    #####:  975:	  state->coins = state->coins + 2;
        -:  976:	}
        -:  977:			
    #####:  978:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  979:	{
        -:  980:	  //discard hand
    #####:  981:	  while(numHandCards(state) > 0)
        -:  982:	    {
    #####:  983:	      discardCard(handPos, currentPlayer, state, 0);
        -:  984:	    }
        -:  985:				
        -:  986:	  //draw 4
    #####:  987:	  for (i = 0; i < 4; i++)
        -:  988:	    {
    #####:  989:	      drawCard(currentPlayer, state);
        -:  990:	    }
        -:  991:				
        -:  992:	  //other players discard hand and redraw if hand size > 4
    #####:  993:	  for (i = 0; i < state->numPlayers; i++)
        -:  994:	    {
    #####:  995:	      if (i != currentPlayer)
        -:  996:		{
    #####:  997:		  if ( state->handCount[i] > 4 )
        -:  998:		    {
        -:  999:		      //discard hand
    #####: 1000:		      while( state->handCount[i] > 0 )
        -: 1001:			{
    #####: 1002:			  discardCard(handPos, i, state, 0);
        -: 1003:			}
        -: 1004:							
        -: 1005:		      //draw 4
    #####: 1006:		      for (j = 0; j < 4; j++)
        -: 1007:			{
    #####: 1008:			  drawCard(i, state);
        -: 1009:			}
        -: 1010:		    }
        -: 1011:		}
        -: 1012:	    }
        -: 1013:				
        -: 1014:	}
    #####: 1015:      return 0;
        -: 1016:		
        -: 1017:    case steward:
    #####: 1018:     playSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1019:      return 0;
        -: 1020:		
        -: 1021:    case tribute:
    #####: 1022:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1023:	if (state->deckCount[nextPlayer] > 0){
    #####: 1024:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1025:	  state->deckCount[nextPlayer]--;
        -: 1026:	}
    #####: 1027:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1028:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1029:	  state->discardCount[nextPlayer]--;
        -: 1030:	}
        -: 1031:	else{
        -: 1032:	  //No Card to Reveal
        -: 1033:	  if (DEBUG){
        -: 1034:	    printf("No cards to reveal\n");
        -: 1035:	  }
        -: 1036:	}
        -: 1037:      }
        -: 1038:	    
        -: 1039:      else{
    #####: 1040:	if (state->deckCount[nextPlayer] == 0){
    #####: 1041:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1042:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1043:	    state->deckCount[nextPlayer]++;
    #####: 1044:	    state->discard[nextPlayer][i] = -1;
    #####: 1045:	    state->discardCount[nextPlayer]--;
        -: 1046:	  }
        -: 1047:			    
    #####: 1048:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1049:	} 
    #####: 1050:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
    #####: 1053:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:	state->deckCount[nextPlayer]--;
        -: 1056:      }    
        -: 1057:		       
    #####: 1058:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1059:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1060:	state->playedCardCount++;
    #####: 1061:	tributeRevealedCards[1] = -1;
        -: 1062:      }
        -: 1063:
    #####: 1064:      for (i = 0; i <= 2; i ++){
    #####: 1065:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1066:	  state->coins += 2;
        -: 1067:	}
        -: 1068:		    
    #####: 1069:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1070:	  drawCard(currentPlayer, state);
    #####: 1071:	  drawCard(currentPlayer, state);
        -: 1072:	}
        -: 1073:	else{//Action Card
    #####: 1074:	  state->numActions = state->numActions + 2;
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case ambassador:
    #####: 1081:      j = 0;		//used to check if player has enough cards to discard
        -: 1082:
    #####: 1083:      if (choice2 > 2 || choice2 < 0)
        -: 1084:	{
    #####: 1085:	  return -1;				
        -: 1086:	}
        -: 1087:
    #####: 1088:      if (choice1 == handPos)
        -: 1089:	{
    #####: 1090:	  return -1;
        -: 1091:	}
        -: 1092:
    #####: 1093:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	{
    #####: 1095:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1096:	    {
    #####: 1097:	      j++;
        -: 1098:	    }
        -: 1099:	}
    #####: 1100:      if (j < choice2)
        -: 1101:	{
    #####: 1102:	  return -1;				
        -: 1103:	}
        -: 1104:
        -: 1105:      if (DEBUG) 
        -: 1106:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1107:
        -: 1108:      //increase supply count for choosen card by amount being discarded
    #####: 1109:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1110:			
        -: 1111:      //each other player gains a copy of revealed card
    #####: 1112:      for (i = 0; i < state->numPlayers; i++)
        -: 1113:	{
    #####: 1114:	  if (i != currentPlayer)
        -: 1115:	    {
    #####: 1116:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1117:	    }
        -: 1118:	}
        -: 1119:
        -: 1120:      //discard played card from hand
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1122:
        -: 1123:      //trash copies of cards returned to supply
    #####: 1124:      for (j = 0; j < choice2; j++)
        -: 1125:	{
    #####: 1126:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1127:	    {
    #####: 1128:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1129:		{
    #####: 1130:		  discardCard(i, currentPlayer, state, 1);
    #####: 1131:		  break;
        -: 1132:		}
        -: 1133:	    }
        -: 1134:	}			
        -: 1135:
    #####: 1136:      return 0;
        -: 1137:		
        -: 1138:    case cutpurse:
        -: 1139:
    #####: 1140:      updateCoins(currentPlayer, state, 2);
    #####: 1141:      for (i = 0; i < state->numPlayers; i++)
        -: 1142:	{
    #####: 1143:	  if (i != currentPlayer)
        -: 1144:	    {
    #####: 1145:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1146:		{
    #####: 1147:		  if (state->hand[i][j] == copper)
        -: 1148:		    {
    #####: 1149:		      discardCard(j, i, state, 0);
    #####: 1150:		      break;
        -: 1151:		    }
    #####: 1152:		  if (j == state->handCount[i])
        -: 1153:		    {
    #####: 1154:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1155:			{
        -: 1156:			  if (DEBUG)
        -: 1157:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1158:			}	
    #####: 1159:		      break;
        -: 1160:		    }		
        -: 1161:		}
        -: 1162:					
        -: 1163:	    }
        -: 1164:				
        -: 1165:	}				
        -: 1166:
        -: 1167:      //discard played card from hand
    #####: 1168:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1169:
    #####: 1170:      return 0;
        -: 1171:
        -: 1172:		
        -: 1173:    case embargo: 
        -: 1174:      //+2 Coins
    #####: 1175:      state->coins = state->coins + 2;
        -: 1176:			
        -: 1177:      //see if selected pile is in play
    #####: 1178:      if ( state->supplyCount[choice1] == -1 )
        -: 1179:	{
    #####: 1180:	  return -1;
        -: 1181:	}
        -: 1182:			
        -: 1183:      //add embargo token to selected supply pile
    #####: 1184:      state->embargoTokens[choice1]++;
        -: 1185:			
        -: 1186:      //trash card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case outpost:
        -: 1191:      //set outpost flag
    #####: 1192:      state->outpostPlayed++;
        -: 1193:			
        -: 1194:      //discard card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case salvager:
        -: 1199:      //+1 buy
    #####: 1200:      state->numBuys++;
        -: 1201:			
    #####: 1202:      if (choice1)
        -: 1203:	{
        -: 1204:	  //gain coins equal to trashed card
    #####: 1205:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1206:	  //trash card
    #####: 1207:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1208:	}
        -: 1209:			
        -: 1210:      //discard card
    #####: 1211:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1212:      return 0;
        -: 1213:		
        -: 1214:    case sea_hag:
    #####: 1215:      for (i = 0; i < state->numPlayers; i++){
    #####: 1216:	if (i != currentPlayer){
    #####: 1217:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1218:	  state->discardCount[i]++;
    #####: 1219:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1220:	}
        -: 1221:      }
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case treasure_map:
        -: 1225:      //search hand for another treasure_map
    #####: 1226:      index = -1;
    #####: 1227:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1228:	{
    #####: 1229:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1230:	    {
    #####: 1231:	      index = i;
    #####: 1232:	      break;
        -: 1233:	    }
        -: 1234:	}
    #####: 1235:      if (index > -1)
        -: 1236:	{
        -: 1237:	  //trash both treasure cards
    #####: 1238:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1239:	  discardCard(index, currentPlayer, state, 1);
        -: 1240:
        -: 1241:	  //gain 4 Gold cards
    #####: 1242:	  for (i = 0; i < 4; i++)
        -: 1243:	    {
    #####: 1244:	      gainCard(gold, state, 1, currentPlayer);
        -: 1245:	    }
        -: 1246:				
        -: 1247:	  //return success
    #####: 1248:	  return 1;
        -: 1249:	}
        -: 1250:			
        -: 1251:      //no second treasure_map found in hand
    #####: 1252:      return -1;
        -: 1253:    }
        -: 1254:	
    #####: 1255:  return -1;
        -: 1256:}
        -: 1257:
    #####: 1258:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1259:{
        -: 1260:	
        -: 1261:  //if card is not trashed, added to Played pile 
    #####: 1262:  if (trashFlag < 1)
        -: 1263:    {
        -: 1264:      //add card to played pile
    #####: 1265:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1266:      state->playedCardCount++;
        -: 1267:    }
        -: 1268:	
        -: 1269:  //set played card to -1
    #####: 1270:  state->hand[currentPlayer][handPos] = -1;
        -: 1271:	
        -: 1272:  //remove card from player's hand
    #####: 1273:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
    #####: 1278:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1279:    {
        -: 1280:      //reduce number of cards in hand
    #####: 1281:      state->handCount[currentPlayer]--;
        -: 1282:    }
        -: 1283:  else 	
        -: 1284:    {
        -: 1285:      //replace discarded card with last card in hand
    #####: 1286:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1287:      //set last card to -1
    #####: 1288:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
        -: 1291:    }
        -: 1292:	
    #####: 1293:  return 0;
        -: 1294:}
        -: 1295:
    #####: 1296:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1297:{
        -: 1298:  //Note: supplyPos is enum of choosen card
        -: 1299:	
        -: 1300:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1301:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1302:    {
    #####: 1303:      return -1;
        -: 1304:    }
        -: 1305:	
        -: 1306:  //added card for [whoseTurn] current player:
        -: 1307:  // toFlag = 0 : add to discard
        -: 1308:  // toFlag = 1 : add to deck
        -: 1309:  // toFlag = 2 : add to hand
        -: 1310:
    #####: 1311:  if (toFlag == 1)
        -: 1312:    {
    #####: 1313:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1314:      state->deckCount[player]++;
        -: 1315:    }
    #####: 1316:  else if (toFlag == 2)
        -: 1317:    {
    #####: 1318:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1319:      state->handCount[player]++;
        -: 1320:    }
        -: 1321:  else
        -: 1322:    {
    #####: 1323:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1324:      state->discardCount[player]++;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //decrease number in supply pile
    #####: 1328:  state->supplyCount[supplyPos]--;
        -: 1329:	 
    #####: 1330:  return 0;
        -: 1331:}
        -: 1332:
    #####: 1333:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1334:{
        -: 1335:  int i;
        -: 1336:	
        -: 1337:  //reset coin count
    #####: 1338:  state->coins = 0;
        -: 1339:
        -: 1340:  //add coins for each Treasure card in player's hand
    #####: 1341:  for (i = 0; i < state->handCount[player]; i++)
        -: 1342:    {
    #####: 1343:      if (state->hand[player][i] == copper)
        -: 1344:	{
    #####: 1345:	  state->coins += 1;
        -: 1346:	}
    #####: 1347:      else if (state->hand[player][i] == silver)
        -: 1348:	{
    #####: 1349:	  state->coins += 2;
        -: 1350:	}
    #####: 1351:      else if (state->hand[player][i] == gold)
        -: 1352:	{
    #####: 1353:	  state->coins += 3;
        -: 1354:	}	
        -: 1355:    }	
        -: 1356:
        -: 1357:  //add bonus
    #####: 1358:  state->coins += bonus;
        -: 1359:
    #####: 1360:  return 0;
        -: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
