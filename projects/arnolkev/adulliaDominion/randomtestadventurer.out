randomtestadventurer.c:
playAdventurer() random test
Test: PASSED
42  44Test: FAILED
Test: PASSED
76  78Test: FAILED
Test: PASSED
8  10Test: FAILED
Test: PASSED
15  17Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
25  27Test: FAILED
Test: PASSED
122  124Test: FAILED
Test: PASSED
126  128Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
119  121Test: FAILED
Test: PASSED
20  22Test: FAILED
Test: PASSED
54  56Test: FAILED
Test: PASSED
117  119Test: FAILED
Test: PASSED
10  12Test: FAILED
Test: PASSED
23  25Test: FAILED
Test: PASSED
42  44Test: FAILED
Test: PASSED
152  154Test: FAILED
Test: PASSED
20  22Test: FAILED
Test: PASSED
52  54Test: FAILED
Test: PASSED
164  166Test: FAILED
Test: PASSED
17  19Test: FAILED
Test: PASSED
234  236Test: FAILED
Test: PASSED
19  21Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
8  10Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
54  56Test: FAILED
Test: PASSED
52  54Test: FAILED
Test: PASSED
39  41Test: FAILED
Test: PASSED
15  17Test: FAILED
Test: PASSED
67  69Test: FAILED
Test: PASSED
49  51Test: FAILED
Test: PASSED
25  27Test: FAILED
Test: PASSED
11  13Test: FAILED
Test: PASSED
31  33Test: FAILED
Test: PASSED
175  177Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
34  36Test: FAILED
Test: PASSED
162  164Test: FAILED
Test: PASSED
13  15Test: FAILED
Test: PASSED
76  78Test: FAILED
Test: PASSED
355  357Test: FAILED
Test: PASSED
16  18Test: FAILED
Test: PASSED
26  28Test: FAILED
Test: PASSED
137  139Test: FAILED
Test: PASSED
29  31Test: FAILED
Test: PASSED
28  30Test: FAILED
Test: PASSED
93  95Test: FAILED
Test: PASSED
27  29Test: FAILED
Test: PASSED
24  26Test: FAILED
Test: PASSED
246  248Test: FAILED
Test: PASSED
151  153Test: FAILED
Test: PASSED
13  15Test: FAILED
Test: PASSED
2  4Test: FAILED
Test: PASSED
125  127Test: FAILED
Test: PASSED
81  83Test: FAILED
Test: PASSED
27  29Test: FAILED
Test: PASSED
213  215Test: FAILED
Test: PASSED
28  30Test: FAILED
Test: PASSED
22  24Test: FAILED
Test: PASSED
34  36Test: FAILED
Test: PASSED
12  14Test: FAILED
Test: PASSED
16  18Test: FAILED
Test: PASSED
17  19Test: FAILED
Test: PASSED
26  28Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
37  39Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
4  6Test: FAILED
Test: PASSED
46  48Test: FAILED
Test: PASSED
104  106Test: FAILED
Test: PASSED
29  31Test: FAILED
Test: PASSED
133  135Test: FAILED
Test: PASSED
88  90Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
127  129Test: FAILED
Test: PASSED
47  49Test: FAILED
Test: PASSED
66  68Test: FAILED
Test: PASSED
76  78Test: FAILED
Test: PASSED
17  19Test: FAILED
Test: PASSED
58  60Test: FAILED
Test: PASSED
16  18Test: FAILED
Test: PASSED
18  20Test: FAILED
Test: PASSED
40  42Test: FAILED
Test: PASSED
8  10Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
193  195Test: FAILED
Test: PASSED
56  58Test: FAILED
Test: PASSED
32  34Test: FAILED
Test: PASSED
14  16Test: FAILED
Test: PASSED
107  109Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
79  81Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
225  227Test: FAILED
Test: PASSED
19  21Test: FAILED
Test: PASSED
89  91Test: FAILED
Test: PASSED
2  4Test: FAILED
Test: PASSED
214  216Test: FAILED
Test: PASSED
61  63Test: FAILED
Test: PASSED
58  60Test: FAILED
Test: PASSED
8  10Test: FAILED
Test: PASSED
184  186Test: FAILED
Test: PASSED
130  132Test: FAILED
Test: PASSED
4  6Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
17  19Test: FAILED
Test: PASSED
194  196Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
49  51Test: FAILED
Test: PASSED
180  182Test: FAILED
Test: PASSED
37  39Test: FAILED
Test: PASSED
68  70Test: FAILED
Test: PASSED
29  31Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
36  38Test: FAILED
Test: PASSED
34  36Test: FAILED
Test: PASSED
199  201Test: FAILED
Test: PASSED
13  15Test: FAILED
Test: PASSED
17  19Test: FAILED
Test: PASSED
41  43Test: FAILED
Test: PASSED
62  64Test: FAILED
Test: PASSED
30  32Test: FAILED
Test: PASSED
128  130Test: FAILED
Test: PASSED
21  23Test: FAILED
Test: PASSED
30  32Test: FAILED
Test: PASSED
281  283Test: FAILED
Test: PASSED
8  10Test: FAILED
Test: PASSED
10  12Test: FAILED
Test: PASSED
44  46Test: FAILED
Test: PASSED
6  8Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
189  191Test: FAILED
Test: PASSED
141  143Test: FAILED
Test: PASSED
319  321Test: FAILED
Test: PASSED
170  172Test: FAILED
Test: PASSED
24  26Test: FAILED
Test: PASSED
33  35Test: FAILED
Test: PASSED
27  29Test: FAILED
Test: PASSED
25  27Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
121  123Test: FAILED
Test: PASSED
97  99Test: FAILED
Test: PASSED
15  17Test: FAILED
Test: PASSED
13  15Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
186  188Test: FAILED
Test: PASSED
67  69Test: FAILED
Test: PASSED
177  179Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
13  15Test: FAILED
Test: PASSED
11  13Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
90  92Test: FAILED
Test: PASSED
2  4Test: FAILED
Test: PASSED
90  92Test: FAILED
Test: PASSED
23  25Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
79  81Test: FAILED
Test: PASSED
111  113Test: FAILED
Test: PASSED
14  16Test: FAILED
Test: PASSED
16  18Test: FAILED
Test: PASSED
15  17Test: FAILED
Test: PASSED
137  139Test: FAILED
Test: PASSED
46  48Test: FAILED
Test: PASSED
37  39Test: FAILED
Test: PASSED
16  18Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
273  275Test: FAILED
Test: PASSED
42  44Test: FAILED
Test: PASSED
12  14Test: FAILED
Test: PASSED
154  156Test: FAILED
Test: PASSED
57  59Test: FAILED
Test: PASSED
77  79Test: FAILED
Test: PASSED
35  37Test: FAILED
Test: PASSED
28  30Test: FAILED
Test: PASSED
56  58Test: FAILED
Test: PASSED
15  17Test: FAILED
Test: PASSED
41  43Test: FAILED
Test: PASSED
195  197Test: FAILED
Test: PASSED
129  131Test: FAILED
Test: PASSED
11  13Test: FAILED
Test: PASSED
57  59Test: FAILED
Test: PASSED
48  50Test: FAILED
Test: PASSED
6  8Test: FAILED
Test: PASSED
4  6Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
42  44Test: FAILED
Test: PASSED
28  30Test: FAILED
Test: PASSED
18  20Test: FAILED
Test: PASSED
26  28Test: FAILED
Test: PASSED
157  159Test: FAILED
Test: PASSED
26  28Test: FAILED
Test: PASSED
128  130Test: FAILED
Test: PASSED
15  17Test: FAILED
Test: PASSED
14  16Test: FAILED
Test: PASSED
35  37Test: FAILED
Test: PASSED
8  10Test: FAILED
Test: PASSED
20  22Test: FAILED
Test: PASSED
97  99Test: FAILED
Test: PASSED
126  128Test: FAILED
Test: PASSED
250  252Test: FAILED
Test: PASSED
176  178Test: FAILED
Test: PASSED
235  237Test: FAILED
Test: PASSED
16  18Test: FAILED
Test: PASSED
4  6Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
14  16Test: FAILED
Test: PASSED
65  67Test: FAILED
Test: PASSED
101  103Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
59  61Test: FAILED
Test: PASSED
65  67Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
160  162Test: FAILED
Test: PASSED
68  70Test: FAILED
Test: PASSED
9  11Test: FAILED
Test: PASSED
9  11Test: FAILED
Test: PASSED
4  6Test: FAILED
Test: PASSED
186  188Test: FAILED
Test: PASSED
22  24Test: FAILED
Test: PASSED
28  30Test: FAILED
Test: PASSED
27  29Test: FAILED
Test: PASSED
8  10Test: FAILED
Test: PASSED
6  8Test: FAILED
Test: PASSED
69  71Test: FAILED
Test: PASSED
76  78Test: FAILED
Test: PASSED
101  103Test: FAILED
Test: PASSED
94  96Test: FAILED
Test: PASSED
240  242Test: FAILED
Test: PASSED
32  34Test: FAILED
Test: PASSED
107  109Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
83  85Test: FAILED
Test: PASSED
192  194Test: FAILED
Test: PASSED
135  137Test: FAILED
Test: PASSED
101  103Test: FAILED
Test: PASSED
98  100Test: FAILED
Test: PASSED
13  15Test: FAILED
Test: PASSED
25  27Test: FAILED
Test: PASSED
8  10Test: FAILED
Test: PASSED
44  46Test: FAILED
Test: PASSED
253  255Test: FAILED
Test: PASSED
14  16Test: FAILED
Test: PASSED
230  232Test: FAILED
Test: PASSED
97  99Test: FAILED
Test: PASSED
18  20Test: FAILED
Test: PASSED
12  14Test: FAILED
Test: PASSED
9  11Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
250  252Test: FAILED
Test: PASSED
205  207Test: FAILED
Test: PASSED
63  65Test: FAILED
Test: PASSED
13  15Test: FAILED
Test: PASSED
57  59Test: FAILED
Test: PASSED
61  63Test: FAILED
Test: PASSED
15  17Test: FAILED
Test: PASSED
9  11Test: FAILED
Test: PASSED
18  20Test: FAILED
Test: PASSED
49  51Test: FAILED
Test: PASSED
14  16Test: FAILED
Test: PASSED
10  12Test: FAILED
Test: PASSED
87  89Test: FAILED
Test: PASSED
43  45Test: FAILED
Test: PASSED
74  76Test: FAILED
Test: PASSED
12  14Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
128  130Test: FAILED
Test: PASSED
298  300Test: FAILED
Test: PASSED
127  129Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
40  42Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
25  27Test: FAILED
Test: PASSED
14  16Test: FAILED
Test: PASSED
16  18Test: FAILED
Test: PASSED
189  191Test: FAILED
Test: PASSED
94  96Test: FAILED
Test: PASSED
12  14Test: FAILED
Test: PASSED
129  131Test: FAILED
Test: PASSED
37  39Test: FAILED
Test: PASSED
11  13Test: FAILED
Test: PASSED
30  32Test: FAILED
Test: PASSED
32  34Test: FAILED
Test: PASSED
18  20Test: FAILED
Test: PASSED
171  173Test: FAILED
Test: PASSED
58  60Test: FAILED
Test: PASSED
2  4Test: FAILED
Test: PASSED
69  71Test: FAILED
Test: PASSED
378  380Test: FAILED
Test: PASSED
28  30Test: FAILED
Test: PASSED
55  57Test: FAILED
Test: PASSED
71  73Test: FAILED
Test: PASSED
4  6Test: FAILED
Test: PASSED
283  285Test: FAILED
Test: PASSED
84  86Test: FAILED
Test: PASSED
137  139Test: FAILED
Test: PASSED
26  28Test: FAILED
Test: PASSED
235  237Test: FAILED
Test: PASSED
114  116Test: FAILED
Test: PASSED
23  25Test: FAILED
Test: PASSED
120  122Test: FAILED
Test: PASSED
225  227Test: FAILED
Test: PASSED
119  121Test: FAILED
Test: PASSED
76  78Test: FAILED
Test: PASSED
11  13Test: FAILED
Test: PASSED
67  69Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
40  42Test: FAILED
Test: PASSED
2  4Test: FAILED
Test: PASSED
133  135Test: FAILED
Test: PASSED
9  11Test: FAILED
Test: PASSED
105  107Test: FAILED
Test: PASSED
21  23Test: FAILED
Test: PASSED
11  13Test: FAILED
Test: PASSED
95  97Test: FAILED
Test: PASSED
77  79Test: FAILED
Test: PASSED
32  34Test: FAILED
Test: PASSED
46  48Test: FAILED
Test: PASSED
19  21Test: FAILED
Test: PASSED
155  157Test: FAILED
Test: PASSED
220  222Test: FAILED
Test: PASSED
78  80Test: FAILED
Test: PASSED
111  113Test: FAILED
Test: PASSED
143  145Test: FAILED
Test: PASSED
63  65Test: FAILED
Test: PASSED
193  195Test: FAILED
Test: PASSED
215  217Test: FAILED
Test: PASSED
12  14Test: FAILED
Test: PASSED
6  8Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
26  28Test: FAILED
Test: PASSED
79  81Test: FAILED
Test: PASSED
10  12Test: FAILED
Test: PASSED
123  125Test: FAILED
Test: PASSED
15  17Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
79  81Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
43  45Test: FAILED
Test: PASSED
47  49Test: FAILED
Test: PASSED
10  12Test: FAILED
Test: PASSED
8  10Test: FAILED
Test: PASSED
12  14Test: FAILED
Test: PASSED
9  11Test: FAILED
Test: PASSED
6  8Test: FAILED
Test: PASSED
2  4Test: FAILED
Test: PASSED
138  140Test: FAILED
Test: PASSED
259  261Test: FAILED
Test: PASSED
6  8Test: FAILED
Test: PASSED
353  355Test: FAILED
Test: PASSED
38  40Test: FAILED
Test: PASSED
103  105Test: FAILED
Test: PASSED
93  95Test: FAILED
Test: PASSED
6  8Test: FAILED
Test: PASSED
48  50Test: FAILED
Test: PASSED
75  77Test: FAILED
Test: PASSED
186  188Test: FAILED
Test: PASSED
139  141Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
18  20Test: FAILED
Test: PASSED
107  109Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
10  12Test: FAILED
Test: PASSED
22  24Test: FAILED
Test: PASSED
20  22Test: FAILED
Test: PASSED
51  53Test: FAILED
Test: PASSED
73  75Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
84  86Test: FAILED
Test: PASSED
74  76Test: FAILED
Test: PASSED
31  33Test: FAILED
Test: PASSED
35  37Test: FAILED
Test: PASSED
19  21Test: FAILED
Test: PASSED
78  80Test: FAILED
Test: PASSED
30  32Test: FAILED
Test: PASSED
224  226Test: FAILED
Test: PASSED
309  311Test: FAILED
Test: PASSED
12  14Test: FAILED
Test: PASSED
160  162Test: FAILED
Test: PASSED
11  13Test: FAILED
Test: PASSED
230  232Test: FAILED
Test: PASSED
87  89Test: FAILED
Test: PASSED
9  11Test: FAILED
Test: PASSED
65  67Test: FAILED
Test: PASSED
75  77Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
73  75Test: FAILED
Test: PASSED
199  201Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
30  32Test: FAILED
Test: PASSED
14  16Test: FAILED
Test: PASSED
76  78Test: FAILED
Test: PASSED
103  105Test: FAILED
Test: PASSED
32  34Test: FAILED
Test: PASSED
82  84Test: FAILED
Test: PASSED
113  115Test: FAILED
Test: PASSED
76  78Test: FAILED
Test: PASSED
77  79Test: FAILED
Test: PASSED
22  24Test: FAILED
Test: PASSED
22  24Test: FAILED
Test: PASSED
72  74Test: FAILED
Test: PASSED
6  8Test: FAILED
Test: PASSED
2  4Test: FAILED
Test: PASSED
46  48Test: FAILED
Test: PASSED
17  19Test: FAILED
Test: PASSED
38  40Test: FAILED
Test: PASSED
17  19Test: FAILED
Test: PASSED
35  37Test: FAILED
Test: PASSED
65  67Test: FAILED
Test: PASSED
30  32Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
79  81Test: FAILED
Test: PASSED
59  61Test: FAILED
Test: PASSED
221  223Test: FAILED
Test: PASSED
13  15Test: FAILED
Test: PASSED
94  96Test: FAILED
Test: PASSED
64  66Test: FAILED
Test: PASSED
26  28Test: FAILED
Test: PASSED
38  40Test: FAILED
Test: PASSED
213  215Test: FAILED
Test: PASSED
129  131Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
37  39Test: FAILED
Test: PASSED
372  374Test: FAILED
Test: PASSED
14  16Test: FAILED
Test: PASSED
95  97Test: FAILED
Test: PASSED
188  190Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
57  59Test: FAILED
Test: PASSED
7  9Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
51  53Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
2  4Test: FAILED
Test: PASSED
16  18Test: FAILED
Test: PASSED
50  52Test: FAILED
Test: PASSED
42  44Test: FAILED
Test: PASSED
12  14Test: FAILED
Test: PASSED
97  99Test: FAILED
Test: PASSED
11  13Test: FAILED
Test: PASSED
68  70Test: FAILED
Test: PASSED
48  50Test: FAILED
Test: PASSED
166  168Test: FAILED
Test: PASSED
291  293Test: FAILED
Test: PASSED
87  89Test: FAILED
Test: PASSED
29  31Test: FAILED
Test: PASSED
104  106Test: FAILED
Test: PASSED
22  24Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
10  12Test: FAILED
Test: PASSED
238  240Test: FAILED
Test: PASSED
108  110Test: FAILED
Test: PASSED
117  119Test: FAILED
Test: PASSED
108  110Test: FAILED
Test: PASSED
9  11Test: FAILED
Test: PASSED
2  4Test: FAILED
Test: PASSED
2  4Test: FAILED
Test: PASSED
27  29Test: FAILED
Test: PASSED
37  39Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
56  58Test: FAILED
Test: PASSED
8  10Test: FAILED
Test: PASSED
19  21Test: FAILED
Test: PASSED
49  51Test: FAILED
Test: PASSED
111  113Test: FAILED
Test: PASSED
106  108Test: FAILED
Test: PASSED
1  3Test: FAILED
Test: PASSED
65  67Test: FAILED
Test: PASSED
16  18Test: FAILED
Test: PASSED
52  54Test: FAILED
Test: PASSED
244  246Test: FAILED
Test: PASSED
21  23Test: FAILED
Test: PASSED
99  101Test: FAILED
Test: PASSED
50  52Test: FAILED
Test: PASSED
16  18Test: FAILED
Test: PASSED
37  39Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
31  33Test: FAILED
Test: PASSED
87  89Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
89  91Test: FAILED
Test: PASSED
5  7Test: FAILED
Test: PASSED
19  21Test: FAILED
Test: PASSED
3  5Test: FAILED
Test: PASSED
79  81Test: FAILED
Test: PASSED
13  15Test: FAILED
Test: PASSED
4  6Test: FAILED
Test: PASSED
25  27Test: FAILED
Status: 500 failures of the playAdventurer
File 'randomtestadventurer.c'
Lines executed:100.00% of 55
Creating 'randomtestadventurer.c.gcov'

File 'dominion.c'
Lines executed:24.56% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  1043693:    8:int compare(const void* a, const void* b) {
  1043693:    9:  if (*(int*)a > *(int*)b)
   516554:   10:    return 1;
   527139:   11:  if (*(int*)a < *(int*)b)
   233522:   12:    return -1;
   293617:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      500:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      500:   44:  SelectStream(1);
      500:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      500:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      253:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      247:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     2717:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    27170:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    24700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      247:   73:  if (numPlayers == 2)
        -:   74:    {
      133:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      114:   77:  else if (numPlayers == 3)
        -:   78:    {
      114:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      247:   87:  if (numPlayers == 2)
        -:   88:    {
      133:   89:      state->supplyCount[estate] = 8;
      133:   90:      state->supplyCount[duchy] = 8;
      133:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      114:   95:      state->supplyCount[estate] = 12;
      114:   96:      state->supplyCount[duchy] = 12;
      114:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      247:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      247:  102:  state->supplyCount[silver] = 40;
      247:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     5187:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    40755:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    38285:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     2470:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      494:  115:		  if (numPlayers == 2){ 
      133:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      114:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     2223:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     2470:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    35815:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      855:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      608:  140:      state->deckCount[i] = 0;
     2432:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1824:  143:	  state->deck[i][j] = estate;
     1824:  144:	  state->deckCount[i]++;
        -:  145:	}
     4864:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     4256:  148:	  state->deck[i][j] = copper;
     4256:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      855:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      608:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      855:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      608:  166:      state->handCount[i] = 0;
      608:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     6916:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     6669:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      247:  182:  state->outpostPlayed = 0;
      247:  183:  state->phase = 0;
      247:  184:  state->numActions = 1;
      247:  185:  state->numBuys = 1;
      247:  186:  state->playedCardCount = 0;
      247:  187:  state->whoseTurn = 0;
      247:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1482:  192:  for (it = 0; it < 5; it++){
     1235:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      247:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      247:  198:  return 0;
        -:  199:}
        -:  200:
     1238:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1238:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1238:  209:  if (state->deckCount[player] < 1)
       65:  210:    return -1;
     1173:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   156475:  214:  while (state->deckCount[player] > 0) {
   154129:  215:    card = floor(Random() * state->deckCount[player]);
   154129:  216:    newDeck[newDeckPos] = state->deck[player][card];
   154129:  217:    newDeckPos++;
 12632763:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
 12478634:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   154129:  221:    state->deckCount[player]--;
        -:  222:  }
   155302:  223:  for (i = 0; i < newDeckPos; i++) {
   154129:  224:    state->deck[player][i] = newDeck[i];
   154129:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1173:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i, j;
    #####:  326:  int count = 0;
        -:  327:
        -:  328:	// making changes to count all card types in the deck
    #####:  329:	for (j=0; j<27; j++) {
    #####:  330:		card = j;
        -:  331:
    #####:  332:  for (i = 0; i < state->deckCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->deck[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->handCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->hand[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  for (i = 0; i < state->discardCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
        -:  345:    }
        -:  346:	}
    #####:  347:  return count;
        -:  348:}
        -:  349:
      500:  350:int whoseTurn(struct gameState *state) {
      500:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
    #####:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
    #####:  357:  int currentPlayer = whoseTurn(state);
        -:  358:  
        -:  359:  //Discard hand
    #####:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
    #####:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
    #####:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    #####:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
    #####:  374:  state->outpostPlayed = 0;
    #####:  375:  state->phase = 0;
    #####:  376:  state->numActions = 1;
    #####:  377:  state->coins = 0;
    #####:  378:  state->numBuys = 1;
    #####:  379:  state->playedCardCount = 0;
    #####:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
    #####:  384:  for (k = 0; k < 5; k++){
    #####:  385:    drawCard(state->whoseTurn, state);//Draw a card
        -:  386:  }
        -:  387:
        -:  388:  //Update money
    #####:  389:  updateCoins(state->whoseTurn, state , 0);
        -:  390:
    #####:  391:  return 0;
        -:  392:}
        -:  393:
    #####:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
    #####:  399:  if (state->supplyCount[province] == 0)
        -:  400:    {
    #####:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
    #####:  405:  j = 0;
    #####:  406:  for (i = 0; i < 25; i++)
        -:  407:    {
    #####:  408:      if (state->supplyCount[i] == 0)
        -:  409:	{
    #####:  410:	  j++;
        -:  411:	}
        -:  412:    }
    #####:  413:  if ( j >= 3)
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
    #####:  418:  return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->deckCount[player]; i++)
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
     9220:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
     9220:  532:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    23061:  537:    for (i = 0; i < state->discardCount[player];i++){
    22996:  538:      state->deck[player][i] = state->discard[player][i];
    22996:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
       65:  542:    state->deckCount[player] = state->discardCount[player];
       65:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
       65:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
       65:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
       65:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
       65:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
       65:  563:    if (deckCounter == 0)
    #####:  564:      return -1;
        -:  565:
       65:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       65:  567:    state->deckCount[player]--;
       65:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
     9155:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
     9155:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
     9155:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     9155:  580:    state->deckCount[player]--;
     9155:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
     9220:  584:  return 0;
        -:  585:}
        -:  586:
    #####:  587:int getCost(int cardNumber)
        -:  588:{
    #####:  589:  switch( cardNumber ) 
        -:  590:    {
        -:  591:    case curse:
    #####:  592:      return 0;
        -:  593:    case estate:
    #####:  594:      return 2;
        -:  595:    case duchy:
    #####:  596:      return 5;
        -:  597:    case province:
    #####:  598:      return 8;
        -:  599:    case copper:
    #####:  600:      return 0;
        -:  601:    case silver:
    #####:  602:      return 3;
        -:  603:    case gold:
    #####:  604:      return 6;
        -:  605:    case adventurer:
    #####:  606:      return 6;
        -:  607:    case council_room:
    #####:  608:      return 5;
        -:  609:    case feast:
    #####:  610:      return 4;
        -:  611:    case gardens:
    #####:  612:      return 4;
        -:  613:    case mine:
    #####:  614:      return 5;
        -:  615:    case remodel:
    #####:  616:      return 4;
        -:  617:    case smithy:
    #####:  618:      return 4;
        -:  619:    case village:
    #####:  620:      return 3;
        -:  621:    case baron:
    #####:  622:      return 4;
        -:  623:    case great_hall:
    #####:  624:      return 3;
        -:  625:    case minion:
    #####:  626:      return 5;
        -:  627:    case steward:
    #####:  628:      return 3;
        -:  629:    case tribute:
    #####:  630:      return 5;
        -:  631:    case ambassador:
    #####:  632:      return 3;
        -:  633:    case cutpurse:
    #####:  634:      return 4;
        -:  635:    case embargo: 
    #####:  636:      return 2;
        -:  637:    case outpost:
    #####:  638:      return 5;
        -:  639:    case salvager:
    #####:  640:      return 4;
        -:  641:    case sea_hag:
    #####:  642:      return 4;
        -:  643:    case treasure_map:
    #####:  644:      return 4;
        -:  645:    }
        -:  646:	
    #####:  647:  return -1;
        -:  648:}
        -:  649:
      500:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int k;
        -:  655:  int x;
        -:  656:  int index;
      500:  657:  int currentPlayer = whoseTurn(state);
      500:  658:  int nextPlayer = currentPlayer + 1;
        -:  659:
      500:  660:  int tributeRevealedCards[2] = {-1, -1};
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
      500:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
      500:  664:  int z = 0;// this is the counter for the temp hand
      500:  665:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  666:    nextPlayer = 0;
        -:  667:  }
        -:  668:  
        -:  669:	
        -:  670:  //uses switch to select card and perform actions
      500:  671:  switch( card ) 
        -:  672:    {
        -:  673:    case adventurer:
      500:  674:    	play_adventurer(currentPlayer, drawntreasure, cardDrawn, temphand, state);
      500:  675:    	return 0;
        -:  676:			
        -:  677:    case council_room:
    #####:  678:    	play_council_room(currentPlayer, state, handPos);
    #####:  679:        return 0;
        -:  680:
        -:  681:    case smithy:
    #####:  682:    	play_smithy(currentPlayer, state, handPos);
    #####:  683:    	return 0;
        -:  684:
        -:  685:    case village:
    #####:  686:    	play_village(currentPlayer, state, handPos);
    #####:  687:    	return 0;
        -:  688:
        -:  689:    case minion:
    #####:  690:    	play_minion(currentPlayer, choice1, choice2, state, handPos);
    #####:  691:    	return 0;
        -:  692:
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
    #####:  706:	if (supplyCount(choice1, state) <= 0){
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
    #####:  715:	  printf("That card is too expensive!\n");
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 0, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
        -:  805:	}
        -:  806:
        -:  807:
    #####:  808:      return 0;
        -:  809:		
        -:  810:    case baron:
    #####:  811:      state->numBuys++;//Increase buys by 1!
    #####:  812:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  813:	int p = 0;//Iterator for hand!
    #####:  814:	int card_not_discarded = 1;//Flag for discard set!
    #####:  815:	while(card_not_discarded){
    #####:  816:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  817:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  818:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  819:	    state->discardCount[currentPlayer]++;
    #####:  820:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  821:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  822:	    }
    #####:  823:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  824:	    state->handCount[currentPlayer]--;
    #####:  825:	    card_not_discarded = 0;//Exit the loop
        -:  826:	  }
    #####:  827:	  else if (p > state->handCount[currentPlayer]){
        -:  828:	    if(DEBUG) {
        -:  829:	      printf("No estate cards in your hand, invalid choice\n");
        -:  830:	      printf("Must gain an estate if there are any\n");
        -:  831:	    }
    #####:  832:	    if (supplyCount(estate, state) > 0){
    #####:  833:	      gainCard(estate, state, 0, currentPlayer);
    #####:  834:	      state->supplyCount[estate]--;//Decrement estates
    #####:  835:	      if (supplyCount(estate, state) == 0){
    #####:  836:		isGameOver(state);
        -:  837:	      }
        -:  838:	    }
    #####:  839:	    card_not_discarded = 0;//Exit the loop
        -:  840:	  }
        -:  841:			    
        -:  842:	  else{
    #####:  843:	    p++;//Next card
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:			    
        -:  848:      else{
    #####:  849:	if (supplyCount(estate, state) > 0){
    #####:  850:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  851:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  852:	  if (supplyCount(estate, state) == 0){
    #####:  853:	    isGameOver(state);
        -:  854:	  }
        -:  855:	}
        -:  856:      }
        -:  857:	    
        -:  858:      
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case great_hall:
        -:  862:      //+1 Card
    #####:  863:      drawCard(currentPlayer, state);
        -:  864:			
        -:  865:      //+1 Actions
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
    #####:  870:      return 0;
        -:  871:		
        -:  872:    case steward:
    #####:  873:      if (choice1 == 1)
        -:  874:	{
        -:  875:	  //+2 cards
    #####:  876:	  drawCard(currentPlayer, state);
    #####:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
    #####:  879:      else if (choice1 == 2)
        -:  880:	{
        -:  881:	  //+2 coins
    #####:  882:	  state->coins = state->coins + 2;
        -:  883:	}
        -:  884:      else
        -:  885:	{
        -:  886:	  //trash 2 cards in hand
    #####:  887:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  888:	  discardCard(choice3, currentPlayer, state, 1);
        -:  889:	}
        -:  890:			
        -:  891:      //discard card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case tribute:
    #####:  896:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  897:	if (state->deckCount[nextPlayer] > 0){
    #####:  898:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  899:	  state->deckCount[nextPlayer]--;
        -:  900:	}
    #####:  901:	else if (state->discardCount[nextPlayer] > 0){
    #####:  902:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  903:	  state->discardCount[nextPlayer]--;
        -:  904:	}
        -:  905:	else{
        -:  906:	  //No Card to Reveal
        -:  907:	  if (DEBUG){
        -:  908:	    printf("No cards to reveal\n");
        -:  909:	  }
        -:  910:	}
        -:  911:      }
        -:  912:	    
        -:  913:      else{
    #####:  914:	if (state->deckCount[nextPlayer] == 0){
    #####:  915:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  916:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  917:	    state->deckCount[nextPlayer]++;
    #####:  918:	    state->discard[nextPlayer][i] = -1;
    #####:  919:	    state->discardCount[nextPlayer]--;
        -:  920:	  }
        -:  921:			    
    #####:  922:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  923:	} 
    #####:  924:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  925:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  926:	state->deckCount[nextPlayer]--;
    #####:  927:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  928:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  929:	state->deckCount[nextPlayer]--;
        -:  930:      }    
        -:  931:		       
    #####:  932:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  933:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  934:	state->playedCardCount++;
    #####:  935:	tributeRevealedCards[1] = -1;
        -:  936:      }
        -:  937:
    #####:  938:      for (i = 0; i <= 2; i ++){
    #####:  939:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  940:	  state->coins += 2;
        -:  941:	}
        -:  942:		    
    #####:  943:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  944:	  drawCard(currentPlayer, state);
    #####:  945:	  drawCard(currentPlayer, state);
        -:  946:	}
        -:  947:	else{//Action Card
    #####:  948:	  state->numActions = state->numActions + 2;
        -:  949:	}
        -:  950:      }
        -:  951:	    
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case ambassador:
    #####:  955:      j = 0;		//used to check if player has enough cards to discard
        -:  956:
    #####:  957:      if (choice2 > 2 || choice2 < 0)
        -:  958:	{
    #####:  959:	  return -1;				
        -:  960:	}
        -:  961:
    #####:  962:      if (choice1 == handPos)
        -:  963:	{
    #####:  964:	  return -1;
        -:  965:	}
        -:  966:
    #####:  967:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  968:	{
    #####:  969:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  970:	    {
    #####:  971:	      j++;
        -:  972:	    }
        -:  973:	}
    #####:  974:      if (j < choice2)
        -:  975:	{
    #####:  976:	  return -1;				
        -:  977:	}
        -:  978:
        -:  979:      if (DEBUG) 
        -:  980:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  981:
        -:  982:      //increase supply count for choosen card by amount being discarded
    #####:  983:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  984:			
        -:  985:      //each other player gains a copy of revealed card
    #####:  986:      for (i = 0; i < state->numPlayers; i++)
        -:  987:	{
    #####:  988:	  if (i != currentPlayer)
        -:  989:	    {
    #####:  990:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  991:	    }
        -:  992:	}
        -:  993:
        -:  994:      //discard played card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);			
        -:  996:
        -:  997:      //trash copies of cards returned to supply
    #####:  998:      for (j = 0; j < choice2; j++)
        -:  999:	{
    #####: 1000:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1001:	    {
    #####: 1002:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1003:		{
    #####: 1004:		  discardCard(i, currentPlayer, state, 1);
    #####: 1005:		  break;
        -: 1006:		}
        -: 1007:	    }
        -: 1008:	}			
        -: 1009:
    #####: 1010:      return 0;
        -: 1011:		
        -: 1012:    case cutpurse:
        -: 1013:
    #####: 1014:      updateCoins(currentPlayer, state, 2);
    #####: 1015:      for (i = 0; i < state->numPlayers; i++)
        -: 1016:	{
    #####: 1017:	  if (i != currentPlayer)
        -: 1018:	    {
    #####: 1019:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1020:		{
    #####: 1021:		  if (state->hand[i][j] == copper)
        -: 1022:		    {
    #####: 1023:		      discardCard(j, i, state, 0);
    #####: 1024:		      break;
        -: 1025:		    }
    #####: 1026:		  if (j == state->handCount[i])
        -: 1027:		    {
    #####: 1028:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1029:			{
        -: 1030:			  if (DEBUG)
        -: 1031:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1032:			}	
    #####: 1033:		      break;
        -: 1034:		    }		
        -: 1035:		}
        -: 1036:					
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}				
        -: 1040:
        -: 1041:      //discard played card from hand
    #####: 1042:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:
        -: 1046:		
        -: 1047:    case embargo: 
        -: 1048:      //+2 Coins
    #####: 1049:      state->coins = state->coins + 2;
        -: 1050:			
        -: 1051:      //see if selected pile is in play
    #####: 1052:      if ( state->supplyCount[choice1] == -1 )
        -: 1053:	{
    #####: 1054:	  return -1;
        -: 1055:	}
        -: 1056:			
        -: 1057:      //add embargo token to selected supply pile
    #####: 1058:      state->embargoTokens[choice1]++;
        -: 1059:			
        -: 1060:      //trash card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case outpost:
        -: 1065:      //set outpost flag
    #####: 1066:      state->outpostPlayed++;
        -: 1067:			
        -: 1068:      //discard card
    #####: 1069:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case salvager:
        -: 1073:      //+1 buy
    #####: 1074:      state->numBuys++;
        -: 1075:			
    #####: 1076:      if (choice1)
        -: 1077:	{
        -: 1078:	  //gain coins equal to trashed card
    #####: 1079:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1080:	  //trash card
    #####: 1081:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1082:	}
        -: 1083:			
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:		
        -: 1088:    case sea_hag:
    #####: 1089:      for (i = 0; i < state->numPlayers; i++){
    #####: 1090:	if (i != currentPlayer){
    #####: 1091:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1092:	  state->discardCount[i]++;
    #####: 1093:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1094:	}
        -: 1095:      }
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
      500: 1132:int play_adventurer(int currentPlayer, int drawntreasure, int cardDrawn, int temphand[MAX_HAND],
        -: 1133:		struct gameState *state) {
      500: 1134:	  int z = 0;// this is the counter for the temp hand
        -: 1135:
     8985: 1136:      while(drawntreasure<2){
     7985: 1137:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       65: 1138:	  shuffle(currentPlayer, state);
        -: 1139:	}
     7985: 1140:	drawCard(currentPlayer, state);
     7985: 1141:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     7985: 1142:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     1000: 1143:	  drawntreasure++;
        -: 1144:	else{
     6985: 1145:	  temphand[z]=cardDrawn;
     6985: 1146:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     6985: 1147:	  z++;
        -: 1148:	}
        -: 1149:      }
     7985: 1150:      while(z-1>=0){
     6985: 1151:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     6985: 1152:	z=z-1;
        -: 1153:      }
      500: 1154:      return 0;
        -: 1155:}
        -: 1156:
    #####: 1157:int play_council_room(int currentPlayer, struct gameState *state, int handPos) {
        -: 1158:	int i;
        -: 1159:
        -: 1160:    //+4 Cards
    #####: 1161:    for (i = 0; i < 3; i++)
        -: 1162:	{
    #####: 1163:	  drawCard(currentPlayer, state);
        -: 1164:	}
        -: 1165:
        -: 1166:    //+1 Buy
    #####: 1167:    state->numBuys++;
        -: 1168:
        -: 1169:    //Each other player draws a card
    #####: 1170:    for (i = 0; i < state->numPlayers; i++)
        -: 1171:	{
    #####: 1172:	  if ( i != currentPlayer )
        -: 1173:	    {
    #####: 1174:	      drawCard(i, state);
        -: 1175:	    }
        -: 1176:	}
        -: 1177:
        -: 1178:    //put played card in played card pile
    #####: 1179:    discardCard(handPos, currentPlayer, state, 0);
        -: 1180:
    #####: 1181:    return 0;
        -: 1182:}
        -: 1183:
    #####: 1184:int play_smithy(int currentPlayer, struct gameState *state, int handPos) {
        -: 1185:	int i;
        -: 1186:
        -: 1187:    //+3 Cards
    #####: 1188:    for (i = 0; i < 3; i++)
        -: 1189:	{
    #####: 1190:	  drawCard(currentPlayer, state);
        -: 1191:	}
        -: 1192:
        -: 1193:    //discard card from hand
    #####: 1194:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:    return 0;
        -: 1196:}
        -: 1197:
    #####: 1198:int play_village(int currentPlayer, struct gameState *state, int handPos) {
        -: 1199:    //+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
        -: 1201:
        -: 1202:    //+2 Actions
    #####: 1203:    state->numActions = state->numActions + 2;
        -: 1204:
        -: 1205:    //discard played card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
    #####: 1210:int play_minion(int currentPlayer, int choice1, int choice2,
        -: 1211:		struct gameState *state, int handPos) {
        -: 1212:	int i;
        -: 1213:	int j;
        -: 1214:
        -: 1215:    //+1 action
    #####: 1216:    state->numActions++;
        -: 1217:
        -: 1218:    //discard card from hand
    #####: 1219:    discardCard(handPos, currentPlayer, state, 0);
        -: 1220:
    #####: 1221:    if (choice1)		//+2 coins
        -: 1222:	{
    #####: 1223:	  state->coins = state->coins + 2;
        -: 1224:	}
        -: 1225:
    #####: 1226:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1227:	{
        -: 1228:	  //discard hand
    #####: 1229:	  while(numHandCards(state) > 0)
        -: 1230:	    {
    #####: 1231:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1232:	    }
        -: 1233:
        -: 1234:	  //draw 4
    #####: 1235:	  for (i = 0; i < 4; i++)
        -: 1236:	    {
    #####: 1237:	      drawCard(currentPlayer, state);
        -: 1238:	    }
        -: 1239:
        -: 1240:	  //other players discard hand and redraw if hand size > 4
    #####: 1241:	  for (i = 0; i < state->numPlayers; i++)
        -: 1242:	    {
    #####: 1243:	      if (i != currentPlayer)
        -: 1244:		{
    #####: 1245:		  if ( state->handCount[i] > 4 )
        -: 1246:		    {
        -: 1247:		      //discard hand
    #####: 1248:		      while( state->handCount[i] > 0 )
        -: 1249:			{
    #####: 1250:			  discardCard(handPos, i, state, 0);
        -: 1251:			}
        -: 1252:
        -: 1253:		      //draw 4
    #####: 1254:		      for (j = 0; j < 4; j++)
        -: 1255:			{
    #####: 1256:			  drawCard(i, state);
        -: 1257:			}
        -: 1258:		    }
        -: 1259:		}
        -: 1260:	    }
        -: 1261:
        -: 1262:	}
    #####: 1263:    return 0;
        -: 1264:}
        -: 1265:
    #####: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
    #####: 1270:  if (trashFlag < 1)
        -: 1271:    {
        -: 1272:      //add card to played pile
    #####: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1274:      state->playedCardCount++;
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
    #####: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
    #####: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
    #####: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
    #####: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
    #####: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:	
    #####: 1301:  return 0;
        -: 1302:}
        -: 1303:
    #####: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1309:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1310:    {
    #####: 1311:      return -1;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
    #####: 1319:  if (toFlag == 1)
        -: 1320:    {
    #####: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1322:      state->deckCount[player]++;
        -: 1323:    }
    #####: 1324:  else if (toFlag == 2)
        -: 1325:    {
    #####: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1327:      state->handCount[player]++;
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
    #####: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1332:      state->discardCount[player]++;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
    #####: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
    #####: 1338:  return 0;
        -: 1339:}
        -: 1340:
      247: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
      247: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
     1482: 1349:  for (i = 0; i < state->handCount[player]; i++)
        -: 1350:    {
     1235: 1351:      if (state->hand[player][i] == copper)
        -: 1352:	{
      869: 1353:	  state->coins += 1;
        -: 1354:	}
      366: 1355:      else if (state->hand[player][i] == silver)
        -: 1356:	{
    #####: 1357:	  state->coins += 2;
        -: 1358:	}
      366: 1359:      else if (state->hand[player][i] == gold)
        -: 1360:	{
    #####: 1361:	  state->coins += 3;
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
      247: 1366:  state->coins += bonus;
        -: 1367:
      247: 1368:  return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
File 'randomtestadventurer.c'
Lines executed:100.00% of 55
Branches executed:100.00% of 32
Taken at least once:100.00% of 32
Calls executed:100.00% of 21
Creating 'randomtestadventurer.c.gcov'

File 'dominion.c'
Lines executed:24.56% of 566
Branches executed:25.54% of 419
Taken at least once:18.62% of 419
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1043693 returned 100% blocks executed 100%
  1043693:    8:int compare(const void* a, const void* b) {
  1043693:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 516554 (fallthrough)
branch  1 taken 527139
   516554:   10:    return 1;
   527139:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 233522 (fallthrough)
branch  1 taken 293617
   233522:   12:    return -1;
   293617:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 500 returned 100% blocks executed 95%
      500:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      500:   44:  SelectStream(1);
call    0 returned 500
      500:   45:  PutSeed((long)randomSeed);
call    0 returned 500
        -:   46:  
        -:   47:  //check number of players
      500:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 500 (fallthrough)
branch  1 taken 0
branch  2 taken 253 (fallthrough)
branch  3 taken 247
        -:   49:    {
      253:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      247:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     2717:   57:  for (i = 0; i < 10; i++)
branch  0 taken 2470
branch  1 taken 247 (fallthrough)
        -:   58:    {
    27170:   59:      for (j = 0; j < 10; j++)
branch  0 taken 24700
branch  1 taken 2470 (fallthrough)
        -:   60:        {
    24700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 22230 (fallthrough)
branch  1 taken 2470
branch  2 taken 0 (fallthrough)
branch  3 taken 22230
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      247:   73:  if (numPlayers == 2)
branch  0 taken 133 (fallthrough)
branch  1 taken 114
        -:   74:    {
      133:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      114:   77:  else if (numPlayers == 3)
branch  0 taken 114 (fallthrough)
branch  1 taken 0
        -:   78:    {
      114:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      247:   87:  if (numPlayers == 2)
branch  0 taken 133 (fallthrough)
branch  1 taken 114
        -:   88:    {
      133:   89:      state->supplyCount[estate] = 8;
      133:   90:      state->supplyCount[duchy] = 8;
      133:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      114:   95:      state->supplyCount[estate] = 12;
      114:   96:      state->supplyCount[duchy] = 12;
      114:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      247:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      247:  102:  state->supplyCount[silver] = 40;
      247:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     5187:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 4940
branch  1 taken 247 (fallthrough)
        -:  107:    {
    40755:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 38285
branch  1 taken 2470 (fallthrough)
        -:  109:	{
    38285:  110:	  if (kingdomCards[j] == i)
branch  0 taken 2470 (fallthrough)
branch  1 taken 35815
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     2470:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 2223 (fallthrough)
branch  1 taken 247
branch  2 taken 0 (fallthrough)
branch  3 taken 2223
        -:  114:		{
      494:  115:		  if (numPlayers == 2){ 
branch  0 taken 133 (fallthrough)
branch  1 taken 114
      133:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      114:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     2223:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     2470:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    35815:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      855:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 608
branch  1 taken 247 (fallthrough)
        -:  139:    {
      608:  140:      state->deckCount[i] = 0;
     2432:  141:      for (j = 0; j < 3; j++)
branch  0 taken 1824
branch  1 taken 608 (fallthrough)
        -:  142:	{
     1824:  143:	  state->deck[i][j] = estate;
     1824:  144:	  state->deckCount[i]++;
        -:  145:	}
     4864:  146:      for (j = 3; j < 10; j++)
branch  0 taken 4256
branch  1 taken 608 (fallthrough)
        -:  147:	{
     4256:  148:	  state->deck[i][j] = copper;
     4256:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      855:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 608
branch  1 taken 247 (fallthrough)
        -:  155:    {
      608:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 608
branch  1 taken 0 (fallthrough)
branch  2 taken 608
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      855:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 608
branch  1 taken 247 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      608:  166:      state->handCount[i] = 0;
      608:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     6916:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 6669
branch  1 taken 247 (fallthrough)
        -:  177:    {
     6669:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      247:  182:  state->outpostPlayed = 0;
      247:  183:  state->phase = 0;
      247:  184:  state->numActions = 1;
      247:  185:  state->numBuys = 1;
      247:  186:  state->playedCardCount = 0;
      247:  187:  state->whoseTurn = 0;
      247:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1482:  192:  for (it = 0; it < 5; it++){
branch  0 taken 1235
branch  1 taken 247 (fallthrough)
     1235:  193:    drawCard(state->whoseTurn, state);
call    0 returned 1235
        -:  194:  }
        -:  195:
      247:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 247
        -:  197:
      247:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 1238 returned 100% blocks executed 100%
     1238:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1238:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1238:  209:  if (state->deckCount[player] < 1)
branch  0 taken 65 (fallthrough)
branch  1 taken 1173
       65:  210:    return -1;
     1173:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 1173
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   156475:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 154129
branch  1 taken 1173 (fallthrough)
   154129:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 154129
   154129:  216:    newDeck[newDeckPos] = state->deck[player][card];
   154129:  217:    newDeckPos++;
 12632763:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 12478634
branch  1 taken 154129 (fallthrough)
 12478634:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   154129:  221:    state->deckCount[player]--;
        -:  222:  }
   155302:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 154129
branch  1 taken 1173 (fallthrough)
   154129:  224:    state->deck[player][i] = newDeck[i];
   154129:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1173:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i, j;
    #####:  326:  int count = 0;
        -:  327:
        -:  328:	// making changes to count all card types in the deck
    #####:  329:	for (j=0; j<27; j++) {
branch  0 never executed
branch  1 never executed
    #####:  330:		card = j;
        -:  331:
    #####:  332:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:    }
        -:  341:
    #####:  342:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  345:    }
        -:  346:	}
    #####:  347:  return count;
        -:  348:}
        -:  349:
function whoseTurn called 500 returned 100% blocks executed 100%
      500:  350:int whoseTurn(struct gameState *state) {
      500:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
    #####:  357:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  358:  
        -:  359:  //Discard hand
    #####:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
    #####:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
    #####:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    #####:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
    #####:  374:  state->outpostPlayed = 0;
    #####:  375:  state->phase = 0;
    #####:  376:  state->numActions = 1;
    #####:  377:  state->coins = 0;
    #####:  378:  state->numBuys = 1;
    #####:  379:  state->playedCardCount = 0;
    #####:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
    #####:  384:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  385:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  386:  }
        -:  387:
        -:  388:  //Update money
    #####:  389:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  390:
    #####:  391:  return 0;
        -:  392:}
        -:  393:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
    #####:  399:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  400:    {
    #####:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
    #####:  405:  j = 0;
    #####:  406:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  409:	{
    #####:  410:	  j++;
        -:  411:	}
        -:  412:    }
    #####:  413:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
    #####:  418:  return 0;
        -:  419:}
        -:  420:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
function drawCard called 9220 returned 100% blocks executed 92%
     9220:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
     9220:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 65 (fallthrough)
branch  1 taken 9155
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    23061:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 22996
branch  1 taken 65 (fallthrough)
    22996:  538:      state->deck[player][i] = state->discard[player][i];
    22996:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
       65:  542:    state->deckCount[player] = state->discardCount[player];
       65:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
       65:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 65
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
       65:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
       65:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
       65:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
       65:  563:    if (deckCounter == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 65
    #####:  564:      return -1;
        -:  565:
       65:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       65:  567:    state->deckCount[player]--;
       65:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
     9155:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
     9155:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
     9155:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     9155:  580:    state->deckCount[player]--;
     9155:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
     9220:  584:  return 0;
        -:  585:}
        -:  586:
function getCost called 0 returned 0% blocks executed 0%
    #####:  587:int getCost(int cardNumber)
        -:  588:{
    #####:  589:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  590:    {
        -:  591:    case curse:
    #####:  592:      return 0;
        -:  593:    case estate:
    #####:  594:      return 2;
        -:  595:    case duchy:
    #####:  596:      return 5;
        -:  597:    case province:
    #####:  598:      return 8;
        -:  599:    case copper:
    #####:  600:      return 0;
        -:  601:    case silver:
    #####:  602:      return 3;
        -:  603:    case gold:
    #####:  604:      return 6;
        -:  605:    case adventurer:
    #####:  606:      return 6;
        -:  607:    case council_room:
    #####:  608:      return 5;
        -:  609:    case feast:
    #####:  610:      return 4;
        -:  611:    case gardens:
    #####:  612:      return 4;
        -:  613:    case mine:
    #####:  614:      return 5;
        -:  615:    case remodel:
    #####:  616:      return 4;
        -:  617:    case smithy:
    #####:  618:      return 4;
        -:  619:    case village:
    #####:  620:      return 3;
        -:  621:    case baron:
    #####:  622:      return 4;
        -:  623:    case great_hall:
    #####:  624:      return 3;
        -:  625:    case minion:
    #####:  626:      return 5;
        -:  627:    case steward:
    #####:  628:      return 3;
        -:  629:    case tribute:
    #####:  630:      return 5;
        -:  631:    case ambassador:
    #####:  632:      return 3;
        -:  633:    case cutpurse:
    #####:  634:      return 4;
        -:  635:    case embargo: 
    #####:  636:      return 2;
        -:  637:    case outpost:
    #####:  638:      return 5;
        -:  639:    case salvager:
    #####:  640:      return 4;
        -:  641:    case sea_hag:
    #####:  642:      return 4;
        -:  643:    case treasure_map:
    #####:  644:      return 4;
        -:  645:    }
        -:  646:	
    #####:  647:  return -1;
        -:  648:}
        -:  649:
function cardEffect called 500 returned 100% blocks executed 3%
      500:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int k;
        -:  655:  int x;
        -:  656:  int index;
      500:  657:  int currentPlayer = whoseTurn(state);
call    0 returned 500
      500:  658:  int nextPlayer = currentPlayer + 1;
        -:  659:
      500:  660:  int tributeRevealedCards[2] = {-1, -1};
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
      500:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
      500:  664:  int z = 0;// this is the counter for the temp hand
      500:  665:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 500
    #####:  666:    nextPlayer = 0;
        -:  667:  }
        -:  668:  
        -:  669:	
        -:  670:  //uses switch to select card and perform actions
      500:  671:  switch( card ) 
branch  0 taken 500
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  672:    {
        -:  673:    case adventurer:
      500:  674:    	play_adventurer(currentPlayer, drawntreasure, cardDrawn, temphand, state);
call    0 returned 500
      500:  675:    	return 0;
        -:  676:			
        -:  677:    case council_room:
    #####:  678:    	play_council_room(currentPlayer, state, handPos);
call    0 never executed
    #####:  679:        return 0;
        -:  680:
        -:  681:    case smithy:
    #####:  682:    	play_smithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  683:    	return 0;
        -:  684:
        -:  685:    case village:
    #####:  686:    	play_village(currentPlayer, state, handPos);
call    0 never executed
    #####:  687:    	return 0;
        -:  688:
        -:  689:    case minion:
    #####:  690:    	play_minion(currentPlayer, choice1, choice2, state, handPos);
call    0 never executed
    #####:  691:    	return 0;
        -:  692:
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  706:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  803:	      break;
        -:  804:	    }
        -:  805:	}
        -:  806:
        -:  807:
    #####:  808:      return 0;
        -:  809:		
        -:  810:    case baron:
    #####:  811:      state->numBuys++;//Increase buys by 1!
    #####:  812:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  813:	int p = 0;//Iterator for hand!
    #####:  814:	int card_not_discarded = 1;//Flag for discard set!
    #####:  815:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  816:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  817:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  818:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  819:	    state->discardCount[currentPlayer]++;
    #####:  820:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  821:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  822:	    }
    #####:  823:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  824:	    state->handCount[currentPlayer]--;
    #####:  825:	    card_not_discarded = 0;//Exit the loop
        -:  826:	  }
    #####:  827:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  828:	    if(DEBUG) {
        -:  829:	      printf("No estate cards in your hand, invalid choice\n");
        -:  830:	      printf("Must gain an estate if there are any\n");
        -:  831:	    }
    #####:  832:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  833:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  834:	      state->supplyCount[estate]--;//Decrement estates
    #####:  835:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  836:		isGameOver(state);
call    0 never executed
        -:  837:	      }
        -:  838:	    }
    #####:  839:	    card_not_discarded = 0;//Exit the loop
        -:  840:	  }
        -:  841:			    
        -:  842:	  else{
    #####:  843:	    p++;//Next card
        -:  844:	  }
        -:  845:	}
        -:  846:      }
        -:  847:			    
        -:  848:      else{
    #####:  849:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  850:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  851:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  852:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  853:	    isGameOver(state);
call    0 never executed
        -:  854:	  }
        -:  855:	}
        -:  856:      }
        -:  857:	    
        -:  858:      
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case great_hall:
        -:  862:      //+1 Card
    #####:  863:      drawCard(currentPlayer, state);
call    0 never executed
        -:  864:			
        -:  865:      //+1 Actions
    #####:  866:      state->numActions++;
        -:  867:			
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  870:      return 0;
        -:  871:		
        -:  872:    case steward:
    #####:  873:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  874:	{
        -:  875:	  //+2 cards
    #####:  876:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  877:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  878:	}
    #####:  879:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  880:	{
        -:  881:	  //+2 coins
    #####:  882:	  state->coins = state->coins + 2;
        -:  883:	}
        -:  884:      else
        -:  885:	{
        -:  886:	  //trash 2 cards in hand
    #####:  887:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  888:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  889:	}
        -:  890:			
        -:  891:      //discard card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case tribute:
    #####:  896:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  897:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  898:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  899:	  state->deckCount[nextPlayer]--;
        -:  900:	}
    #####:  901:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  903:	  state->discardCount[nextPlayer]--;
        -:  904:	}
        -:  905:	else{
        -:  906:	  //No Card to Reveal
        -:  907:	  if (DEBUG){
        -:  908:	    printf("No cards to reveal\n");
        -:  909:	  }
        -:  910:	}
        -:  911:      }
        -:  912:	    
        -:  913:      else{
    #####:  914:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  915:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  916:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  917:	    state->deckCount[nextPlayer]++;
    #####:  918:	    state->discard[nextPlayer][i] = -1;
    #####:  919:	    state->discardCount[nextPlayer]--;
        -:  920:	  }
        -:  921:			    
    #####:  922:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  923:	} 
    #####:  924:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  925:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  926:	state->deckCount[nextPlayer]--;
    #####:  927:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  928:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  929:	state->deckCount[nextPlayer]--;
        -:  930:      }    
        -:  931:		       
    #####:  932:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  933:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  934:	state->playedCardCount++;
    #####:  935:	tributeRevealedCards[1] = -1;
        -:  936:      }
        -:  937:
    #####:  938:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  939:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  940:	  state->coins += 2;
        -:  941:	}
        -:  942:		    
    #####:  943:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  944:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  945:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  946:	}
        -:  947:	else{//Action Card
    #####:  948:	  state->numActions = state->numActions + 2;
        -:  949:	}
        -:  950:      }
        -:  951:	    
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case ambassador:
    #####:  955:      j = 0;		//used to check if player has enough cards to discard
        -:  956:
    #####:  957:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  958:	{
    #####:  959:	  return -1;				
        -:  960:	}
        -:  961:
    #####:  962:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;
        -:  965:	}
        -:  966:
    #####:  967:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	{
    #####:  969:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  970:	    {
    #####:  971:	      j++;
        -:  972:	    }
        -:  973:	}
    #####:  974:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  return -1;				
        -:  977:	}
        -:  978:
        -:  979:      if (DEBUG) 
        -:  980:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  981:
        -:  982:      //increase supply count for choosen card by amount being discarded
    #####:  983:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  984:			
        -:  985:      //each other player gains a copy of revealed card
    #####:  986:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  987:	{
    #####:  988:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  991:	    }
        -:  992:	}
        -:  993:
        -:  994:      //discard played card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  996:
        -:  997:      //trash copies of cards returned to supply
    #####:  998:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  999:	{
    #####: 1000:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1001:	    {
    #####: 1002:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1003:		{
    #####: 1004:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1005:		  break;
        -: 1006:		}
        -: 1007:	    }
        -: 1008:	}			
        -: 1009:
    #####: 1010:      return 0;
        -: 1011:		
        -: 1012:    case cutpurse:
        -: 1013:
    #####: 1014:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1015:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1016:	{
    #####: 1017:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1018:	    {
    #####: 1019:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1020:		{
    #####: 1021:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
    #####: 1023:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1024:		      break;
        -: 1025:		    }
    #####: 1026:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1027:		    {
    #####: 1028:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1029:			{
        -: 1030:			  if (DEBUG)
        -: 1031:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1032:			}	
    #####: 1033:		      break;
        -: 1034:		    }		
        -: 1035:		}
        -: 1036:					
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}				
        -: 1040:
        -: 1041:      //discard played card from hand
    #####: 1042:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1043:
    #####: 1044:      return 0;
        -: 1045:
        -: 1046:		
        -: 1047:    case embargo: 
        -: 1048:      //+2 Coins
    #####: 1049:      state->coins = state->coins + 2;
        -: 1050:			
        -: 1051:      //see if selected pile is in play
    #####: 1052:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1053:	{
    #####: 1054:	  return -1;
        -: 1055:	}
        -: 1056:			
        -: 1057:      //add embargo token to selected supply pile
    #####: 1058:      state->embargoTokens[choice1]++;
        -: 1059:			
        -: 1060:      //trash card
    #####: 1061:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case outpost:
        -: 1065:      //set outpost flag
    #####: 1066:      state->outpostPlayed++;
        -: 1067:			
        -: 1068:      //discard card
    #####: 1069:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case salvager:
        -: 1073:      //+1 buy
    #####: 1074:      state->numBuys++;
        -: 1075:			
    #####: 1076:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //gain coins equal to trashed card
    #####: 1079:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1080:	  //trash card
    #####: 1081:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1082:	}
        -: 1083:			
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1086:      return 0;
        -: 1087:		
        -: 1088:    case sea_hag:
    #####: 1089:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1090:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1091:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1092:	  state->discardCount[i]++;
    #####: 1093:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1094:	}
        -: 1095:      }
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
function play_adventurer called 500 returned 100% blocks executed 100%
      500: 1132:int play_adventurer(int currentPlayer, int drawntreasure, int cardDrawn, int temphand[MAX_HAND],
        -: 1133:		struct gameState *state) {
      500: 1134:	  int z = 0;// this is the counter for the temp hand
        -: 1135:
     8985: 1136:      while(drawntreasure<2){
branch  0 taken 7985
branch  1 taken 500 (fallthrough)
     7985: 1137:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 65 (fallthrough)
branch  1 taken 7920
       65: 1138:	  shuffle(currentPlayer, state);
call    0 returned 65
        -: 1139:	}
     7985: 1140:	drawCard(currentPlayer, state);
call    0 returned 7985
     7985: 1141:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     7985: 1142:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 7549 (fallthrough)
branch  1 taken 436
branch  2 taken 7252 (fallthrough)
branch  3 taken 297
branch  4 taken 267 (fallthrough)
branch  5 taken 6985
     1000: 1143:	  drawntreasure++;
        -: 1144:	else{
     6985: 1145:	  temphand[z]=cardDrawn;
     6985: 1146:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     6985: 1147:	  z++;
        -: 1148:	}
        -: 1149:      }
     7985: 1150:      while(z-1>=0){
branch  0 taken 6985
branch  1 taken 500 (fallthrough)
     6985: 1151:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     6985: 1152:	z=z-1;
        -: 1153:      }
      500: 1154:      return 0;
        -: 1155:}
        -: 1156:
function play_council_room called 0 returned 0% blocks executed 0%
    #####: 1157:int play_council_room(int currentPlayer, struct gameState *state, int handPos) {
        -: 1158:	int i;
        -: 1159:
        -: 1160:    //+4 Cards
    #####: 1161:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	{
    #####: 1163:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1164:	}
        -: 1165:
        -: 1166:    //+1 Buy
    #####: 1167:    state->numBuys++;
        -: 1168:
        -: 1169:    //Each other player draws a card
    #####: 1170:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1171:	{
    #####: 1172:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1173:	    {
    #####: 1174:	      drawCard(i, state);
call    0 never executed
        -: 1175:	    }
        -: 1176:	}
        -: 1177:
        -: 1178:    //put played card in played card pile
    #####: 1179:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1180:
    #####: 1181:    return 0;
        -: 1182:}
        -: 1183:
function play_smithy called 0 returned 0% blocks executed 0%
    #####: 1184:int play_smithy(int currentPlayer, struct gameState *state, int handPos) {
        -: 1185:	int i;
        -: 1186:
        -: 1187:    //+3 Cards
    #####: 1188:    for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1189:	{
    #####: 1190:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1191:	}
        -: 1192:
        -: 1193:    //discard card from hand
    #####: 1194:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:    return 0;
        -: 1196:}
        -: 1197:
function play_village called 0 returned 0% blocks executed 0%
    #####: 1198:int play_village(int currentPlayer, struct gameState *state, int handPos) {
        -: 1199:    //+1 Card
    #####: 1200:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1201:
        -: 1202:    //+2 Actions
    #####: 1203:    state->numActions = state->numActions + 2;
        -: 1204:
        -: 1205:    //discard played card from hand
    #####: 1206:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1207:    return 0;
        -: 1208:}
        -: 1209:
function play_minion called 0 returned 0% blocks executed 0%
    #####: 1210:int play_minion(int currentPlayer, int choice1, int choice2,
        -: 1211:		struct gameState *state, int handPos) {
        -: 1212:	int i;
        -: 1213:	int j;
        -: 1214:
        -: 1215:    //+1 action
    #####: 1216:    state->numActions++;
        -: 1217:
        -: 1218:    //discard card from hand
    #####: 1219:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1220:
    #####: 1221:    if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1222:	{
    #####: 1223:	  state->coins = state->coins + 2;
        -: 1224:	}
        -: 1225:
    #####: 1226:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1227:	{
        -: 1228:	  //discard hand
    #####: 1229:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1230:	    {
    #####: 1231:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1232:	    }
        -: 1233:
        -: 1234:	  //draw 4
    #####: 1235:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1236:	    {
    #####: 1237:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1238:	    }
        -: 1239:
        -: 1240:	  //other players discard hand and redraw if hand size > 4
    #####: 1241:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	    {
    #####: 1243:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1244:		{
    #####: 1245:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1246:		    {
        -: 1247:		      //discard hand
    #####: 1248:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1249:			{
    #####: 1250:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1251:			}
        -: 1252:
        -: 1253:		      //draw 4
    #####: 1254:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1255:			{
    #####: 1256:			  drawCard(i, state);
call    0 never executed
        -: 1257:			}
        -: 1258:		    }
        -: 1259:		}
        -: 1260:	    }
        -: 1261:
        -: 1262:	}
    #####: 1263:    return 0;
        -: 1264:}
        -: 1265:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
    #####: 1270:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1271:    {
        -: 1272:      //add card to played pile
    #####: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1274:      state->playedCardCount++;
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
    #####: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
    #####: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
    #####: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
    #####: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
    #####: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:	
    #####: 1301:  return 0;
        -: 1302:}
        -: 1303:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1309:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1310:    {
    #####: 1311:      return -1;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
    #####: 1319:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1322:      state->deckCount[player]++;
        -: 1323:    }
    #####: 1324:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1325:    {
    #####: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1327:      state->handCount[player]++;
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
    #####: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1332:      state->discardCount[player]++;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
    #####: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
    #####: 1338:  return 0;
        -: 1339:}
        -: 1340:
function updateCoins called 247 returned 100% blocks executed 82%
      247: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
      247: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
     1482: 1349:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 1235
branch  1 taken 247 (fallthrough)
        -: 1350:    {
     1235: 1351:      if (state->hand[player][i] == copper)
branch  0 taken 869 (fallthrough)
branch  1 taken 366
        -: 1352:	{
      869: 1353:	  state->coins += 1;
        -: 1354:	}
      366: 1355:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 366
        -: 1356:	{
    #####: 1357:	  state->coins += 2;
        -: 1358:	}
      366: 1359:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 366
        -: 1360:	{
    #####: 1361:	  state->coins += 3;
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
      247: 1366:  state->coins += bonus;
        -: 1367:
      247: 1368:  return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
