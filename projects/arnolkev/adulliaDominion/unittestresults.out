Result for running Dominion test suit:
unittest1.c:
updateCoins() test
treasure cards: 0
bonus: 1

copper
actual: 1
expected: 1
Test: PASSED

silver
actual: 1
expected: 1
Test: PASSED

gold
actual: 1
expected: 1
Test: PASSED

treasure cards: 1
bonus: 2

copper
actual: 3
expected: 3
Test: PASSED

silver
actual: 4
expected: 4
Test: PASSED

gold
actual: 5
expected: 5
Test: PASSED

treasure cards: 2
bonus: 3

copper
actual: 5
expected: 5
Test: PASSED

silver
actual: 7
expected: 7
Test: PASSED

gold
actual: 9
expected: 9
Test: PASSED

treasure cards: 3
bonus: 4

copper
actual: 7
expected: 7
Test: PASSED

silver
actual: 10
expected: 10
Test: PASSED

gold
actual: 13
expected: 13
Test: PASSED

treasure cards: 4
bonus: 5

copper
actual: 9
expected: 9
Test: PASSED

silver
actual: 13
expected: 13
Test: PASSED

gold
actual: 17
expected: 17
Test: PASSED

treasure cards: 5
bonus: 6

copper
actual: 11
expected: 11
Test: PASSED

silver
actual: 16
expected: 16
Test: PASSED

gold
actual: 21
expected: 21
Test: PASSED

TEST SUCCESSFUL
File 'unittest1.c'
Lines executed:91.11% of 45
Creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:16.13% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
        6:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       54:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
       30:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      384:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      264:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       30:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       30:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       30:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       30:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       30:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       30:  576:    state->deckCount[player]--;
       30:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       30:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:      shuffle(currentPlayer, state);
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    #####:  684:}
        -:  685:
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
    #####:  695:}
        -:  696:
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
    #####:  706:}
        -:  707:
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
    #####:  712:    drawCard(currentPlayer, state);
    #####:  713:  } else if (choice1 == 2) {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
    #####:  724:}
        -:  725:
    #####:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
    #####:  733:  int currentPlayer = whoseTurn(state);
    #####:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
    #####:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
    #####:  738:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
    #####:  744:  switch( card ) 
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
    #####:  787:	if (supplyCount(choice1, state) <= 0){
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
    #####:  796:	  printf("That card is too expensive!\n");
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1058:	  drawCard(currentPlayer, state);
    #####: 1059:	  drawCard(currentPlayer, state);
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
    #####: 1204:	if (i != currentPlayer){
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
    #####: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
    #####: 1250:  if (trashFlag < 1)
        -: 1251:    {
        -: 1252:      //add card to played pile
    #####: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
    #####: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
    #####: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
    #####: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
    #####: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
    #####: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
    #####: 1281:  return 0;
        -: 1282:}
        -: 1283:
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
       24: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
       24: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
       99: 1329:  for (i = 0; i < state->handCount[player]; i++)
        -: 1330:    {
       75: 1331:      if (state->hand[player][i] == copper)
        -: 1332:	{
       33: 1333:	  state->coins += 1;
        -: 1334:	}
       42: 1335:      else if (state->hand[player][i] == silver)
        -: 1336:	{
       15: 1337:	  state->coins += 2;
        -: 1338:	}
       27: 1339:      else if (state->hand[player][i] == gold)
        -: 1340:	{
       15: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
       24: 1346:  state->coins += bonus;
        -: 1347:
       24: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
File 'unittest1.c'
Lines executed:91.11% of 45
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
Calls executed:87.50% of 24
Creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:16.13% of 564
Branches executed:15.83% of 417
Taken at least once:13.19% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 180 returned 100% blocks executed 83%
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 180
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 48 (fallthrough)
branch  1 taken 132
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 88%
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
call    0 returned 6
        6:   45:  PutSeed((long)randomSeed);
call    0 returned 6
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 6
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
branch  0 taken 60
branch  1 taken 6 (fallthrough)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
branch  0 taken 600
branch  1 taken 60 (fallthrough)
        -:   60:        {
      600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 540 (fallthrough)
branch  1 taken 60
branch  2 taken 0 (fallthrough)
branch  3 taken 540
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 120
branch  1 taken 6 (fallthrough)
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 930
branch  1 taken 60 (fallthrough)
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
branch  0 taken 60 (fallthrough)
branch  1 taken 870
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 54 (fallthrough)
branch  1 taken 6
branch  2 taken 0 (fallthrough)
branch  3 taken 54
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
branch  0 taken 6 (fallthrough)
branch  1 taken 0
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       54:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
branch  0 taken 36
branch  1 taken 12 (fallthrough)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
branch  0 taken 84
branch  1 taken 12 (fallthrough)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 162
branch  1 taken 6 (fallthrough)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
branch  0 taken 30
branch  1 taken 6 (fallthrough)
       30:  193:    drawCard(state->whoseTurn, state);
call    0 returned 30
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 6
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 12 returned 100% blocks executed 94%
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 12
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 120
branch  1 taken 12 (fallthrough)
      120:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 120
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      384:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 264
branch  1 taken 120 (fallthrough)
      264:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 120
branch  1 taken 12 (fallthrough)
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 30 returned 100% blocks executed 38%
       30:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       30:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 30
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       30:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       30:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       30:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       30:  576:    state->deckCount[player]--;
       30:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       30:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function handleAdventurerCard called 0 returned 0% blocks executed 0%
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  653:      shuffle(currentPlayer, state);
call    0 never executed
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
function handleSmithy called 0 returned 0% blocks executed 0%
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
call    0 never executed
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  684:}
        -:  685:
function handleVillage called 0 returned 0% blocks executed 0%
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:}
        -:  696:
function handleGreatHall called 0 returned 0% blocks executed 0%
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
call    0 never executed
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  706:}
        -:  707:
function handleSteward called 0 returned 0% blocks executed 0%
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  712:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  713:  } else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:}
        -:  725:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
    #####:  733:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
    #####:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
    #####:  738:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
    #####:  744:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
call    0 never executed
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
call    0 never executed
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  787:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
call    0 never executed
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:		isGameOver(state);
call    0 never executed
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:	    isGameOver(state);
call    0 never executed
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
call    0 never executed
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:			  drawCard(i, state);
call    0 never executed
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
call    0 never executed
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1059:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1204:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
    #####: 1250:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1251:    {
        -: 1252:      //add card to played pile
    #####: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
    #####: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
    #####: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
    #####: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
    #####: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
    #####: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
    #####: 1281:  return 0;
        -: 1282:}
        -: 1283:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
function updateCoins called 24 returned 100% blocks executed 100%
       24: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
       24: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
       99: 1329:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 75
branch  1 taken 24 (fallthrough)
        -: 1330:    {
       75: 1331:      if (state->hand[player][i] == copper)
branch  0 taken 33 (fallthrough)
branch  1 taken 42
        -: 1332:	{
       33: 1333:	  state->coins += 1;
        -: 1334:	}
       42: 1335:      else if (state->hand[player][i] == silver)
branch  0 taken 15 (fallthrough)
branch  1 taken 27
        -: 1336:	{
       15: 1337:	  state->coins += 2;
        -: 1338:	}
       27: 1339:      else if (state->hand[player][i] == gold)
branch  0 taken 15 (fallthrough)
branch  1 taken 12
        -: 1340:	{
       15: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
       24: 1346:  state->coins += bonus;
        -: 1347:
       24: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
unittest2.c:
gainCard() test

supply pile is empty
Test: PASSED

add card to deck
Test: PASSED

Add card to hand
Test: PASSED

check if correct card was added
Test: PASSED

Add card to discard pile
Test: PASSED

check if correct card was added
Test: PASSED

Decrease copper supply
Test: PASSED

TEST SUCCESSFUL
File 'unittest2.c'
Lines executed:90.24% of 41
Creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:18.44% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        5:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:      shuffle(currentPlayer, state);
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    #####:  684:}
        -:  685:
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
    #####:  695:}
        -:  696:
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
    #####:  706:}
        -:  707:
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
    #####:  712:    drawCard(currentPlayer, state);
    #####:  713:  } else if (choice1 == 2) {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
    #####:  724:}
        -:  725:
    #####:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
    #####:  733:  int currentPlayer = whoseTurn(state);
    #####:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
    #####:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
    #####:  738:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
    #####:  744:  switch( card ) 
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
    #####:  787:	if (supplyCount(choice1, state) <= 0){
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
    #####:  796:	  printf("That card is too expensive!\n");
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1058:	  drawCard(currentPlayer, state);
    #####: 1059:	  drawCard(currentPlayer, state);
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
    #####: 1204:	if (i != currentPlayer){
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
    #####: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
    #####: 1250:  if (trashFlag < 1)
        -: 1251:    {
        -: 1252:      //add card to played pile
    #####: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
    #####: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
    #####: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
    #####: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
    #####: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
    #####: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
    #####: 1281:  return 0;
        -: 1282:}
        -: 1283:
        5: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1289:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1290:    {
        1: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
        4: 1299:  if (toFlag == 1)
        -: 1300:    {
        1: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1302:      state->deckCount[player]++;
        -: 1303:    }
        3: 1304:  else if (toFlag == 2)
        -: 1305:    {
        1: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
        2: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
        4: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
        4: 1318:  return 0;
        -: 1319:}
        -: 1320:
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
File 'unittest2.c'
Lines executed:90.24% of 41
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:88.46% of 26
Creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:18.44% of 564
Branches executed:17.27% of 417
Taken at least once:14.15% of 417
Calls executed:8.42% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 8 (fallthrough)
branch  1 taken 22
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 1
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 1
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 10
branch  1 taken 1 (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 100
branch  1 taken 10 (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 20
branch  1 taken 1 (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 155
branch  1 taken 10 (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 9 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 9
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 14
branch  1 taken 2 (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 27
branch  1 taken 1 (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 5
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 1
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 2
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 20
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 44
branch  1 taken 20 (fallthrough)
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 5 returned 100% blocks executed 100%
        5:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 38%
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function handleAdventurerCard called 0 returned 0% blocks executed 0%
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  653:      shuffle(currentPlayer, state);
call    0 never executed
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
function handleSmithy called 0 returned 0% blocks executed 0%
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
call    0 never executed
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  684:}
        -:  685:
function handleVillage called 0 returned 0% blocks executed 0%
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:}
        -:  696:
function handleGreatHall called 0 returned 0% blocks executed 0%
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
call    0 never executed
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  706:}
        -:  707:
function handleSteward called 0 returned 0% blocks executed 0%
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  712:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  713:  } else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:}
        -:  725:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
    #####:  733:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
    #####:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
    #####:  738:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
    #####:  744:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
call    0 never executed
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
call    0 never executed
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  787:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
call    0 never executed
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:		isGameOver(state);
call    0 never executed
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:	    isGameOver(state);
call    0 never executed
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
call    0 never executed
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:			  drawCard(i, state);
call    0 never executed
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
call    0 never executed
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1059:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1204:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
    #####: 1250:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1251:    {
        -: 1252:      //add card to played pile
    #####: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
    #####: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
    #####: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
    #####: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
    #####: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
    #####: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
    #####: 1281:  return 0;
        -: 1282:}
        -: 1283:
function gainCard called 5 returned 100% blocks executed 100%
        5: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1289:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 5
branch  1 taken 1 (fallthrough)
branch  2 taken 4
        -: 1290:    {
        1: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
        4: 1299:  if (toFlag == 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -: 1300:    {
        1: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1302:      state->deckCount[player]++;
        -: 1303:    }
        3: 1304:  else if (toFlag == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -: 1305:    {
        1: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
        2: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
        4: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
        4: 1318:  return 0;
        -: 1319:}
        -: 1320:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
unittest3.c:
discardCard() test

single card no trash
actual hand size: 0
expected hand size: 0
Test: PASSED
actual card discarded: 4
expected card discarded: 4
Test: PASSED
actual card count: 1
expected card count: 1
Test: PASSED

single card trash
actual hand size: 0
expected hand size: 0
Test: PASSED
actual playedcard count: 0
expected playedcard count: 0
Test: PASSED

full hand discard last card
actual hand size: 4
expected hand size: 4
Test: PASSED
actual hand pos 0: 4
expected hand pos 0: 4
Test: PASSED
actual hand pos 1: 5
expected hand pos 1: 5
Test: PASSED
actual hand pos 2: 6
expected hand pos 2: 6
Test: PASSED
actual hand pos 3: 13
expected hand pos 3: 13
Test: PASSED

full hand discard middle card
actual hand size: 4
expected hand size: 4
Test: PASSED
actual hand pos 0: 4
expected hand pos 0: 4
Test: PASSED
actual hand pos 1: 5
expected hand pos 1: 5
Test: PASSED
actual hand pos 2: 15
expected hand pos 2: 15
Test: PASSED
actual hand pos 3: 13
expected hand pos 3: 13
Test: PASSED

TEST SUCCESSFUL
File 'unittest3.c'
Lines executed:95.65% of 92
Creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:17.91% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      120:    8:int compare(const void* a, const void* b) {
      120:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      120:   11:  if (*(int*)a < *(int*)b)
       32:   12:    return -1;
       88:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        4:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
        4:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        4:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        8:  115:		  if (numPlayers == 2){ 
        4:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       36:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
        -:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
       20:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
        8:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        8:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        8:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        8:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       96:  214:  while (state->deckCount[player] > 0) {
       80:  215:    card = floor(Random() * state->deckCount[player]);
       80:  216:    newDeck[newDeckPos] = state->deck[player][card];
       80:  217:    newDeckPos++;
      256:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      176:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       80:  221:    state->deckCount[player]--;
        -:  222:  }
       88:  223:  for (i = 0; i < newDeckPos; i++) {
       80:  224:    state->deck[player][i] = newDeck[i];
       80:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        8:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       20:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       20:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:      shuffle(currentPlayer, state);
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    #####:  684:}
        -:  685:
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
    #####:  695:}
        -:  696:
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
    #####:  706:}
        -:  707:
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
    #####:  712:    drawCard(currentPlayer, state);
    #####:  713:  } else if (choice1 == 2) {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
    #####:  724:}
        -:  725:
    #####:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
    #####:  733:  int currentPlayer = whoseTurn(state);
    #####:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
    #####:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
    #####:  738:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
    #####:  744:  switch( card ) 
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
    #####:  787:	if (supplyCount(choice1, state) <= 0){
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
    #####:  796:	  printf("That card is too expensive!\n");
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1058:	  drawCard(currentPlayer, state);
    #####: 1059:	  drawCard(currentPlayer, state);
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
    #####: 1204:	if (i != currentPlayer){
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
        4: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
        4: 1250:  if (trashFlag < 1)
        -: 1251:    {
        -: 1252:      //add card to played pile
        1: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
        4: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
        4: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
        3: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
        1: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
        1: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
        1: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
        1: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
        4: 1281:  return 0;
        -: 1282:}
        -: 1283:
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
        4: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        4: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
       24: 1329:  for (i = 0; i < state->handCount[player]; i++)
        -: 1330:    {
       20: 1331:      if (state->hand[player][i] == copper)
        -: 1332:	{
       12: 1333:	  state->coins += 1;
        -: 1334:	}
        8: 1335:      else if (state->hand[player][i] == silver)
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        8: 1339:      else if (state->hand[player][i] == gold)
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        4: 1346:  state->coins += bonus;
        -: 1347:
        4: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
File 'unittest3.c'
Lines executed:95.65% of 92
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:95.24% of 63
Creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:17.91% of 564
Branches executed:17.27% of 417
Taken at least once:13.91% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 120 returned 100% blocks executed 83%
      120:    8:int compare(const void* a, const void* b) {
      120:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 120
    #####:   10:    return 1;
      120:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 32 (fallthrough)
branch  1 taken 88
       32:   12:    return -1;
       88:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 4 returned 100% blocks executed 88%
        4:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
call    0 returned 4
        4:   45:  PutSeed((long)randomSeed);
call    0 returned 4
        -:   46:  
        -:   47:  //check number of players
        4:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 4
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
branch  0 taken 40
branch  1 taken 4 (fallthrough)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
branch  0 taken 400
branch  1 taken 40 (fallthrough)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 360 (fallthrough)
branch  1 taken 40
branch  2 taken 0 (fallthrough)
branch  3 taken 360
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 80
branch  1 taken 4 (fallthrough)
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 620
branch  1 taken 40 (fallthrough)
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
branch  0 taken 40 (fallthrough)
branch  1 taken 580
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 36 (fallthrough)
branch  1 taken 4
branch  2 taken 0 (fallthrough)
branch  3 taken 36
        -:  114:		{
        8:  115:		  if (numPlayers == 2){ 
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       36:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
branch  0 taken 24
branch  1 taken 8 (fallthrough)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
        -:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
branch  0 taken 56
branch  1 taken 8 (fallthrough)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 108
branch  1 taken 4 (fallthrough)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
branch  0 taken 20
branch  1 taken 4 (fallthrough)
       20:  193:    drawCard(state->whoseTurn, state);
call    0 returned 20
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 4
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 8 returned 100% blocks executed 94%
        8:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        8:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        8:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    #####:  210:    return -1;
        8:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 8
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       96:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 80
branch  1 taken 8 (fallthrough)
       80:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 80
       80:  216:    newDeck[newDeckPos] = state->deck[player][card];
       80:  217:    newDeckPos++;
      256:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 176
branch  1 taken 80 (fallthrough)
      176:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       80:  221:    state->deckCount[player]--;
        -:  222:  }
       88:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 80
branch  1 taken 8 (fallthrough)
       80:  224:    state->deck[player][i] = newDeck[i];
       80:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        8:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 20 returned 100% blocks executed 38%
       20:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 20
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       20:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function handleAdventurerCard called 0 returned 0% blocks executed 0%
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  653:      shuffle(currentPlayer, state);
call    0 never executed
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
function handleSmithy called 0 returned 0% blocks executed 0%
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
call    0 never executed
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  684:}
        -:  685:
function handleVillage called 0 returned 0% blocks executed 0%
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:}
        -:  696:
function handleGreatHall called 0 returned 0% blocks executed 0%
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
call    0 never executed
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  706:}
        -:  707:
function handleSteward called 0 returned 0% blocks executed 0%
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  712:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  713:  } else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:}
        -:  725:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
    #####:  733:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
    #####:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
    #####:  738:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
    #####:  744:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
call    0 never executed
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
call    0 never executed
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  787:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
call    0 never executed
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:		isGameOver(state);
call    0 never executed
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:	    isGameOver(state);
call    0 never executed
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
call    0 never executed
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:			  drawCard(i, state);
call    0 never executed
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
call    0 never executed
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1059:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1204:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
function discardCard called 4 returned 100% blocks executed 89%
        4: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
        4: 1250:  if (trashFlag < 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -: 1251:    {
        -: 1252:      //add card to played pile
        1: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
        4: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
        4: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
        3: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
        1: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
        1: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
        1: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
        1: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
        4: 1281:  return 0;
        -: 1282:}
        -: 1283:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        4: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
       24: 1329:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 20
branch  1 taken 4 (fallthrough)
        -: 1330:    {
       20: 1331:      if (state->hand[player][i] == copper)
branch  0 taken 12 (fallthrough)
branch  1 taken 8
        -: 1332:	{
       12: 1333:	  state->coins += 1;
        -: 1334:	}
        8: 1335:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        8: 1339:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        4: 1346:  state->coins += bonus;
        -: 1347:
        4: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
unittest4.c:
isGameOver() test

province cards empty
Test: PASSED

all supply piles empty
Test: PASSED

two supply piles empty
Test: PASSED

one supply pile empty
Test: PASSED

Province cards not empty and
Three supply piles not empty
Test: PASSED

TEST SUCCESSFUL
File 'unittest4.c'
Lines executed:88.89% of 36
Creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:17.55% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:      shuffle(currentPlayer, state);
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    #####:  684:}
        -:  685:
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
    #####:  695:}
        -:  696:
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
    #####:  706:}
        -:  707:
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
    #####:  712:    drawCard(currentPlayer, state);
    #####:  713:  } else if (choice1 == 2) {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
    #####:  724:}
        -:  725:
    #####:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
    #####:  733:  int currentPlayer = whoseTurn(state);
    #####:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
    #####:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
    #####:  738:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
    #####:  744:  switch( card ) 
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
    #####:  787:	if (supplyCount(choice1, state) <= 0){
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
    #####:  796:	  printf("That card is too expensive!\n");
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1058:	  drawCard(currentPlayer, state);
    #####: 1059:	  drawCard(currentPlayer, state);
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
    #####: 1204:	if (i != currentPlayer){
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
    #####: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
    #####: 1250:  if (trashFlag < 1)
        -: 1251:    {
        -: 1252:      //add card to played pile
    #####: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
    #####: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
    #####: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
    #####: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
    #####: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
    #####: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
    #####: 1281:  return 0;
        -: 1282:}
        -: 1283:
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
File 'unittest4.c'
Lines executed:88.89% of 36
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:86.96% of 23
Creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:17.55% of 564
Branches executed:17.75% of 417
Taken at least once:14.63% of 417
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 8 (fallthrough)
branch  1 taken 22
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 1
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 1
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 10
branch  1 taken 1 (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 100
branch  1 taken 10 (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 20
branch  1 taken 1 (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 155
branch  1 taken 10 (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 9 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 9
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 14
branch  1 taken 2 (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 27
branch  1 taken 1 (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 5
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 1
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 2
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 20
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 44
branch  1 taken 20 (fallthrough)
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 5 returned 100% blocks executed 100%
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 100
branch  1 taken 4 (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6 (fallthrough)
branch  1 taken 94
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 38%
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function handleAdventurerCard called 0 returned 0% blocks executed 0%
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  653:      shuffle(currentPlayer, state);
call    0 never executed
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
function handleSmithy called 0 returned 0% blocks executed 0%
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
call    0 never executed
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  684:}
        -:  685:
function handleVillage called 0 returned 0% blocks executed 0%
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:}
        -:  696:
function handleGreatHall called 0 returned 0% blocks executed 0%
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
call    0 never executed
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  706:}
        -:  707:
function handleSteward called 0 returned 0% blocks executed 0%
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  712:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  713:  } else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:}
        -:  725:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
    #####:  733:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
    #####:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
    #####:  738:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
    #####:  744:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
call    0 never executed
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
call    0 never executed
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  787:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
call    0 never executed
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:		isGameOver(state);
call    0 never executed
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:	    isGameOver(state);
call    0 never executed
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
call    0 never executed
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:			  drawCard(i, state);
call    0 never executed
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
call    0 never executed
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1059:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1204:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
    #####: 1250:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1251:    {
        -: 1252:      //add card to played pile
    #####: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
    #####: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
    #####: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
    #####: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
    #####: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
    #####: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
    #####: 1281:  return 0;
        -: 1282:}
        -: 1283:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
cardtest1.c:
playAdventurer() test

gain two cards
actual: 3
expected: 6
Test: FAILED

gain 2 treasure cards
Test: FAILED

No change to supply piles
checking card pile 0
actual: 10
expected: 10
Test: PASSED
checking card pile 1
actual: 8
expected: 8
Test: PASSED
checking card pile 2
actual: 8
expected: 8
Test: PASSED
checking card pile 3
actual: 8
expected: 8
Test: PASSED
checking card pile 4
actual: 46
expected: 46
Test: PASSED
checking card pile 5
actual: 40
expected: 40
Test: PASSED
checking card pile 6
actual: 30
expected: 30
Test: PASSED
checking card pile 7
actual: 10
expected: 10
Test: PASSED
checking card pile 8
actual: -1
expected: -1
Test: PASSED
checking card pile 9
actual: -1
expected: -1
Test: PASSED
checking card pile 10
actual: -1
expected: -1
Test: PASSED
checking card pile 11
actual: 10
expected: 10
Test: PASSED
checking card pile 12
actual: -1
expected: -1
Test: PASSED
checking card pile 13
actual: 10
expected: 10
Test: PASSED
checking card pile 14
actual: 10
expected: 10
Test: PASSED
checking card pile 15
actual: 10
expected: 10
Test: PASSED
checking card pile 16
actual: 8
expected: 8
Test: PASSED
checking card pile 17
actual: -1
expected: -1
Test: PASSED
checking card pile 18
actual: 10
expected: 10
Test: PASSED
checking card pile 19
actual: -1
expected: -1
Test: PASSED
checking card pile 20
actual: -1
expected: -1
Test: PASSED
checking card pile 21
actual: -1
expected: -1
Test: PASSED
checking card pile 22
actual: -1
expected: -1
Test: PASSED
checking card pile 23
actual: -1
expected: -1
Test: PASSED
checking card pile 24
actual: 10
expected: 10
Test: PASSED
checking card pile 25
actual: 10
expected: 10
Test: PASSED
checking card pile 26
actual: 10
expected: 10
Test: PASSED

TEST FAILURE
Fails: 2
File 'cardtest1.c'
Lines executed:97.67% of 43
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:22.34% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
        8:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       14:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       14:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
        4:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       10:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       10:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:    state->deckCount[player]--;
       10:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       10:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        1:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
        1:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
        1:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
       11:  651:  while (drawntreasure < 2) {
        9:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
        4:  653:      shuffle(currentPlayer, state);
        -:  654:    }
        -:  655:
        9:  656:    drawCard(currentPlayer, state);
        9:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
        9:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  659:      drawntreasure++;
        -:  660:    else {
        7:  661:      temphand[z] = cardDrawn;
        7:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        7:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
        9:  667:  while (z - 1 >= 0) {
        7:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        7:  669:    z = z - 1;
        -:  670:  }
        1:  671:}
        -:  672:
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    #####:  684:}
        -:  685:
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
    #####:  695:}
        -:  696:
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
    #####:  706:}
        -:  707:
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
    #####:  712:    drawCard(currentPlayer, state);
    #####:  713:  } else if (choice1 == 2) {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
    #####:  724:}
        -:  725:
        1:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
        1:  733:  int currentPlayer = whoseTurn(state);
        1:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
        1:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
        1:  738:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
        1:  744:  switch( card ) 
        -:  745:    {
        -:  746:    case adventurer:
        1:  747:      handleAdventurerCard(currentPlayer, state, temphand);
        1:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
    #####:  787:	if (supplyCount(choice1, state) <= 0){
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
    #####:  796:	  printf("That card is too expensive!\n");
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1058:	  drawCard(currentPlayer, state);
    #####: 1059:	  drawCard(currentPlayer, state);
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
    #####: 1204:	if (i != currentPlayer){
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
    #####: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
    #####: 1250:  if (trashFlag < 1)
        -: 1251:    {
        -: 1252:      //add card to played pile
    #####: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
    #####: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
    #####: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
    #####: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
    #####: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
    #####: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
    #####: 1281:  return 0;
        -: 1282:}
        -: 1283:
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
File 'cardtest1.c'
Lines executed:97.67% of 43
Branches executed:100.00% of 22
Taken at least once:77.27% of 22
Calls executed:94.74% of 19
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:22.34% of 564
Branches executed:25.18% of 417
Taken at least once:16.55% of 417
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 8 (fallthrough)
branch  1 taken 22
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 1
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 1
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 10
branch  1 taken 1 (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 100
branch  1 taken 10 (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 20
branch  1 taken 1 (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 155
branch  1 taken 10 (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 9 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 9
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 14
branch  1 taken 2 (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 27
branch  1 taken 1 (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 5
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 1
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 10 returned 100% blocks executed 100%
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
branch  0 taken 8 (fallthrough)
branch  1 taken 2
        8:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 2
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 20
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 44
branch  1 taken 20 (fallthrough)
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 14 returned 100% blocks executed 85%
       14:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       14:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4 (fallthrough)
branch  1 taken 10
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        4:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 4 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 4
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       10:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       10:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:    state->deckCount[player]--;
       10:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       10:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function handleAdventurerCard called 1 returned 100% blocks executed 100%
        1:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
        1:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
        1:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
       11:  651:  while (drawntreasure < 2) {
branch  0 taken 9
branch  1 taken 1 (fallthrough)
        9:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 4 (fallthrough)
branch  1 taken 5
        4:  653:      shuffle(currentPlayer, state);
call    0 returned 4
        -:  654:    }
        -:  655:
        9:  656:    drawCard(currentPlayer, state);
call    0 returned 9
        9:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
        9:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 7 (fallthrough)
branch  1 taken 2
branch  2 taken 7 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 7
        2:  659:      drawntreasure++;
        -:  660:    else {
        7:  661:      temphand[z] = cardDrawn;
        7:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        7:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
        9:  667:  while (z - 1 >= 0) {
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        7:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        7:  669:    z = z - 1;
        -:  670:  }
        1:  671:}
        -:  672:
function handleSmithy called 0 returned 0% blocks executed 0%
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
call    0 never executed
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  684:}
        -:  685:
function handleVillage called 0 returned 0% blocks executed 0%
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:}
        -:  696:
function handleGreatHall called 0 returned 0% blocks executed 0%
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
call    0 never executed
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  706:}
        -:  707:
function handleSteward called 0 returned 0% blocks executed 0%
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  712:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  713:  } else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:}
        -:  725:
function cardEffect called 1 returned 100% blocks executed 3%
        1:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
        1:  733:  int currentPlayer = whoseTurn(state);
call    0 returned 1
        1:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
        1:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
        1:  738:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
        1:  744:  switch( card ) 
branch  0 taken 1
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  745:    {
        -:  746:    case adventurer:
        1:  747:      handleAdventurerCard(currentPlayer, state, temphand);
call    0 returned 1
        1:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
call    0 never executed
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  787:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
call    0 never executed
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:		isGameOver(state);
call    0 never executed
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:	    isGameOver(state);
call    0 never executed
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
call    0 never executed
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:			  drawCard(i, state);
call    0 never executed
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
call    0 never executed
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1059:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1204:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
    #####: 1250:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1251:    {
        -: 1252:      //add card to played pile
    #####: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
    #####: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
    #####: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
    #####: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
    #####: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
    #####: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
    #####: 1281:  return 0;
        -: 1282:}
        -: 1283:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
cardtest2.c:
playSmithy() test

gain 3 cards
actual: 7
expected: 7
Test: PASSED

3 cards were from own deck
actual: 2
expected: 2
Test: PASSED

No change to supply piles
checking card pile 0
actual: 10
expected: 10
Test: PASSED
checking card pile 1
actual: 8
expected: 8
Test: PASSED
checking card pile 2
actual: 8
expected: 8
Test: PASSED
checking card pile 3
actual: 8
expected: 8
Test: PASSED
checking card pile 4
actual: 46
expected: 46
Test: PASSED
checking card pile 5
actual: 40
expected: 40
Test: PASSED
checking card pile 6
actual: 30
expected: 30
Test: PASSED
checking card pile 7
actual: 10
expected: 10
Test: PASSED
checking card pile 8
actual: -1
expected: -1
Test: PASSED
checking card pile 9
actual: -1
expected: -1
Test: PASSED
checking card pile 10
actual: -1
expected: -1
Test: PASSED
checking card pile 11
actual: 10
expected: 10
Test: PASSED
checking card pile 12
actual: -1
expected: -1
Test: PASSED
checking card pile 13
actual: 10
expected: 10
Test: PASSED
checking card pile 14
actual: 10
expected: 10
Test: PASSED
checking card pile 15
actual: 10
expected: 10
Test: PASSED
checking card pile 16
actual: 8
expected: 8
Test: PASSED
checking card pile 17
actual: -1
expected: -1
Test: PASSED
checking card pile 18
actual: 10
expected: 10
Test: PASSED
checking card pile 19
actual: -1
expected: -1
Test: PASSED
checking card pile 20
actual: -1
expected: -1
Test: PASSED
checking card pile 21
actual: -1
expected: -1
Test: PASSED
checking card pile 22
actual: -1
expected: -1
Test: PASSED
checking card pile 23
actual: -1
expected: -1
Test: PASSED
checking card pile 24
actual: 10
expected: 10
Test: PASSED
checking card pile 25
actual: 10
expected: 10
Test: PASSED
checking card pile 26
actual: 10
expected: 10
Test: PASSED

TEST SUCCESSFUL
File 'cardtest2.c'
Lines executed:88.57% of 35
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:20.21% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        8:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        8:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        8:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        8:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        8:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        8:  576:    state->deckCount[player]--;
        8:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        8:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:      shuffle(currentPlayer, state);
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
        1:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
        1:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
        4:  677:  for (i = 0; i < 3; i++)
        -:  678:  {
        3:  679:    drawCard(currentPlayer, state);
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
        1:  683:  discardCard(handPos, currentPlayer, state, 1);
        1:  684:}
        -:  685:
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
    #####:  695:}
        -:  696:
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
    #####:  706:}
        -:  707:
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
    #####:  712:    drawCard(currentPlayer, state);
    #####:  713:  } else if (choice1 == 2) {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
    #####:  724:}
        -:  725:
        1:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
        1:  733:  int currentPlayer = whoseTurn(state);
        1:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
        1:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
        1:  738:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
        1:  744:  switch( card ) 
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
    #####:  787:	if (supplyCount(choice1, state) <= 0){
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
    #####:  796:	  printf("That card is too expensive!\n");
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
        1:  892:      handleSmithy(currentPlayer, state, handPos);
        1:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1058:	  drawCard(currentPlayer, state);
    #####: 1059:	  drawCard(currentPlayer, state);
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
    #####: 1204:	if (i != currentPlayer){
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
        1: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
        1: 1250:  if (trashFlag < 1)
        -: 1251:    {
        -: 1252:      //add card to played pile
    #####: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
        1: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
        1: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
        1: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
        1: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
        1: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
        1: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
        1: 1281:  return 0;
        -: 1282:}
        -: 1283:
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
File 'cardtest2.c'
Lines executed:88.57% of 35
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:85.71% of 21
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:20.21% of 564
Branches executed:23.26% of 417
Taken at least once:14.39% of 417
Calls executed:11.58% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 8 (fallthrough)
branch  1 taken 22
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 1
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 1
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 10
branch  1 taken 1 (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 100
branch  1 taken 10 (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 20
branch  1 taken 1 (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 155
branch  1 taken 10 (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 9 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 9
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 14
branch  1 taken 2 (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 27
branch  1 taken 1 (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 5
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 1
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 2
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 20
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 44
branch  1 taken 20 (fallthrough)
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 8 returned 100% blocks executed 38%
        8:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        8:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        8:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        8:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        8:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        8:  576:    state->deckCount[player]--;
        8:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        8:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function handleAdventurerCard called 0 returned 0% blocks executed 0%
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  653:      shuffle(currentPlayer, state);
call    0 never executed
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
function handleSmithy called 1 returned 100% blocks executed 100%
        1:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
        1:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
        4:  677:  for (i = 0; i < 3; i++)
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        -:  678:  {
        3:  679:    drawCard(currentPlayer, state);
call    0 returned 3
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
        1:  683:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 1
        1:  684:}
        -:  685:
function handleVillage called 0 returned 0% blocks executed 0%
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:}
        -:  696:
function handleGreatHall called 0 returned 0% blocks executed 0%
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
call    0 never executed
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  706:}
        -:  707:
function handleSteward called 0 returned 0% blocks executed 0%
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  712:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  713:  } else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:}
        -:  725:
function cardEffect called 1 returned 100% blocks executed 3%
        1:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
        1:  733:  int currentPlayer = whoseTurn(state);
call    0 returned 1
        1:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
        1:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
        1:  738:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
        1:  744:  switch( card ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 1
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
call    0 never executed
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
call    0 never executed
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  787:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
        1:  892:      handleSmithy(currentPlayer, state, handPos);
call    0 returned 1
        1:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
call    0 never executed
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:		isGameOver(state);
call    0 never executed
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:	    isGameOver(state);
call    0 never executed
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
call    0 never executed
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:			  drawCard(i, state);
call    0 never executed
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
call    0 never executed
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1059:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1204:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
function discardCard called 1 returned 100% blocks executed 67%
        1: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
        1: 1250:  if (trashFlag < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1251:    {
        -: 1252:      //add card to played pile
    #####: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
        1: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
        1: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
        1: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
        1: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
        1: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
        1: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
        1: 1281:  return 0;
        -: 1282:}
        -: 1283:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
cardtest3.c:
playVillage() test

gain 1 card
actual: 5
expected: 5
Test: PASSED

card was from own deck
actual: 4
expected: 4
Test: PASSED

gain 2 actions
actual: 5
expected: 5
Test: PASSED

No change to supply piles
checking card pile 0
actual: 10
expected: 10
Test: PASSED
checking card pile 1
actual: 8
expected: 8
Test: PASSED
checking card pile 2
actual: 8
expected: 8
Test: PASSED
checking card pile 3
actual: 8
expected: 8
Test: PASSED
checking card pile 4
actual: 46
expected: 46
Test: PASSED
checking card pile 5
actual: 40
expected: 40
Test: PASSED
checking card pile 6
actual: 30
expected: 30
Test: PASSED
checking card pile 7
actual: 10
expected: 10
Test: PASSED
checking card pile 8
actual: -1
expected: -1
Test: PASSED
checking card pile 9
actual: -1
expected: -1
Test: PASSED
checking card pile 10
actual: -1
expected: -1
Test: PASSED
checking card pile 11
actual: 10
expected: 10
Test: PASSED
checking card pile 12
actual: -1
expected: -1
Test: PASSED
checking card pile 13
actual: 10
expected: 10
Test: PASSED
checking card pile 14
actual: 10
expected: 10
Test: PASSED
checking card pile 15
actual: 10
expected: 10
Test: PASSED
checking card pile 16
actual: 8
expected: 8
Test: PASSED
checking card pile 17
actual: -1
expected: -1
Test: PASSED
checking card pile 18
actual: 10
expected: 10
Test: PASSED
checking card pile 19
actual: -1
expected: -1
Test: PASSED
checking card pile 20
actual: -1
expected: -1
Test: PASSED
checking card pile 21
actual: -1
expected: -1
Test: PASSED
checking card pile 22
actual: -1
expected: -1
Test: PASSED
checking card pile 23
actual: -1
expected: -1
Test: PASSED
checking card pile 24
actual: 10
expected: 10
Test: PASSED
checking card pile 25
actual: 10
expected: 10
Test: PASSED
checking card pile 26
actual: 10
expected: 10
Test: PASSED

TEST SUCCESSFUL
File 'cardtest3.c'
Lines executed:89.74% of 39
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:20.39% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        6:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        6:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        6:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        6:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  576:    state->deckCount[player]--;
        6:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        6:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:      shuffle(currentPlayer, state);
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    #####:  684:}
        -:  685:
        1:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
        1:  688:  drawCard(currentPlayer, state);
        -:  689:
        -:  690:  //+2 Actions
        1:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
        1:  694:  discardCard(handPos, currentPlayer, state, 0);
        1:  695:}
        -:  696:
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
    #####:  706:}
        -:  707:
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
    #####:  712:    drawCard(currentPlayer, state);
    #####:  713:  } else if (choice1 == 2) {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
    #####:  724:}
        -:  725:
        1:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
        1:  733:  int currentPlayer = whoseTurn(state);
        1:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
        1:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
        1:  738:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
        1:  744:  switch( card ) 
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
    #####:  787:	if (supplyCount(choice1, state) <= 0){
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
    #####:  796:	  printf("That card is too expensive!\n");
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
        1:  896:      handleVillage(currentPlayer, state, handPos);
        1:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1058:	  drawCard(currentPlayer, state);
    #####: 1059:	  drawCard(currentPlayer, state);
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
    #####: 1204:	if (i != currentPlayer){
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
        1: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
        1: 1250:  if (trashFlag < 1)
        -: 1251:    {
        -: 1252:      //add card to played pile
        1: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
        1: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
        1: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
        1: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
        1: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
        1: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
        1: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
        1: 1281:  return 0;
        -: 1282:}
        -: 1283:
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
File 'cardtest3.c'
Lines executed:89.74% of 39
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:88.00% of 25
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:20.39% of 564
Branches executed:22.78% of 417
Taken at least once:13.91% of 417
Calls executed:11.58% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 8 (fallthrough)
branch  1 taken 22
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 1
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 1
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 10
branch  1 taken 1 (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 100
branch  1 taken 10 (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 20
branch  1 taken 1 (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 155
branch  1 taken 10 (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 9 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 9
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 14
branch  1 taken 2 (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 27
branch  1 taken 1 (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 5
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 1
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 2
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 20
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 44
branch  1 taken 20 (fallthrough)
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 6 returned 100% blocks executed 38%
        6:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        6:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        6:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        6:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  576:    state->deckCount[player]--;
        6:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        6:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function handleAdventurerCard called 0 returned 0% blocks executed 0%
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  653:      shuffle(currentPlayer, state);
call    0 never executed
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
function handleSmithy called 0 returned 0% blocks executed 0%
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
call    0 never executed
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  684:}
        -:  685:
function handleVillage called 1 returned 100% blocks executed 100%
        1:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
        1:  688:  drawCard(currentPlayer, state);
call    0 returned 1
        -:  689:
        -:  690:  //+2 Actions
        1:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
        1:  694:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1:  695:}
        -:  696:
function handleGreatHall called 0 returned 0% blocks executed 0%
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
call    0 never executed
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  706:}
        -:  707:
function handleSteward called 0 returned 0% blocks executed 0%
    #####:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  709:  if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -:  710:    //+2 cards
    #####:  711:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  712:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  713:  } else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
    #####:  718:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  719:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
    #####:  723:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:}
        -:  725:
function cardEffect called 1 returned 100% blocks executed 3%
        1:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
        1:  733:  int currentPlayer = whoseTurn(state);
call    0 returned 1
        1:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
        1:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
        1:  738:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
        1:  744:  switch( card ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 1
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
call    0 never executed
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
call    0 never executed
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  787:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
        1:  896:      handleVillage(currentPlayer, state, handPos);
call    0 returned 1
        1:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:		isGameOver(state);
call    0 never executed
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:	    isGameOver(state);
call    0 never executed
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
call    0 never executed
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:			  drawCard(i, state);
call    0 never executed
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
call    0 never executed
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1059:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1204:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
function discardCard called 1 returned 100% blocks executed 78%
        1: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
        1: 1250:  if (trashFlag < 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 1251:    {
        -: 1252:      //add card to played pile
        1: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
        1: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
        1: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
        1: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
        1: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
        1: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
        1: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
        1: 1281:  return 0;
        -: 1282:}
        -: 1283:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
cardtest4.c:
playSteward() test

choice 1 gain 2 cards
actual: 6
expected: 6
Test: PASSED

card was from own deck
actual: 3
expected: 3
Test: PASSED

check coins
actual: 3
expected: 3
Test: PASSED

No change to supply piles
checking card pile 0
actual: 10
expected: 10
Test: PASSED
checking card pile 1
actual: 8
expected: 8
Test: PASSED
checking card pile 2
actual: 8
expected: 8
Test: PASSED
checking card pile 3
actual: 8
expected: 8
Test: PASSED
checking card pile 4
actual: 46
expected: 46
Test: PASSED
checking card pile 5
actual: 40
expected: 40
Test: PASSED
checking card pile 6
actual: 30
expected: 30
Test: PASSED
checking card pile 7
actual: 10
expected: 10
Test: PASSED
checking card pile 8
actual: -1
expected: -1
Test: PASSED
checking card pile 9
actual: -1
expected: -1
Test: PASSED
checking card pile 10
actual: -1
expected: -1
Test: PASSED
checking card pile 11
actual: 10
expected: 10
Test: PASSED
checking card pile 12
actual: -1
expected: -1
Test: PASSED
checking card pile 13
actual: 10
expected: 10
Test: PASSED
checking card pile 14
actual: 10
expected: 10
Test: PASSED
checking card pile 15
actual: 10
expected: 10
Test: PASSED
checking card pile 16
actual: 8
expected: 8
Test: PASSED
checking card pile 17
actual: -1
expected: -1
Test: PASSED
checking card pile 18
actual: 10
expected: 10
Test: PASSED
checking card pile 19
actual: -1
expected: -1
Test: PASSED
checking card pile 20
actual: -1
expected: -1
Test: PASSED
checking card pile 21
actual: -1
expected: -1
Test: PASSED
checking card pile 22
actual: -1
expected: -1
Test: PASSED
checking card pile 23
actual: -1
expected: -1
Test: PASSED
checking card pile 24
actual: 10
expected: 10
Test: PASSED
checking card pile 25
actual: 10
expected: 10
Test: PASSED
checking card pile 26
actual: 10
expected: 10
Test: PASSED

choice 2 gain 2 coins
actual: 5
expected: 5
Test: PASSED

check hand
actual: 4
expected: 4
Test: PASSED

check deck
actual: 5
expected: 5
Test: PASSED

No change to supply piles
checking card pile 0
actual: 10
expected: 10
Test: PASSED
checking card pile 1
actual: 8
expected: 8
Test: PASSED
checking card pile 2
actual: 8
expected: 8
Test: PASSED
checking card pile 3
actual: 8
expected: 8
Test: PASSED
checking card pile 4
actual: 46
expected: 46
Test: PASSED
checking card pile 5
actual: 40
expected: 40
Test: PASSED
checking card pile 6
actual: 30
expected: 30
Test: PASSED
checking card pile 7
actual: 10
expected: 10
Test: PASSED
checking card pile 8
actual: -1
expected: -1
Test: PASSED
checking card pile 9
actual: -1
expected: -1
Test: PASSED
checking card pile 10
actual: -1
expected: -1
Test: PASSED
checking card pile 11
actual: 10
expected: 10
Test: PASSED
checking card pile 12
actual: -1
expected: -1
Test: PASSED
checking card pile 13
actual: 10
expected: 10
Test: PASSED
checking card pile 14
actual: 10
expected: 10
Test: PASSED
checking card pile 15
actual: 10
expected: 10
Test: PASSED
checking card pile 16
actual: 8
expected: 8
Test: PASSED
checking card pile 17
actual: -1
expected: -1
Test: PASSED
checking card pile 18
actual: 10
expected: 10
Test: PASSED
checking card pile 19
actual: -1
expected: -1
Test: PASSED
checking card pile 20
actual: -1
expected: -1
Test: PASSED
checking card pile 21
actual: -1
expected: -1
Test: PASSED
checking card pile 22
actual: -1
expected: -1
Test: PASSED
checking card pile 23
actual: -1
expected: -1
Test: PASSED
checking card pile 24
actual: 10
expected: 10
Test: PASSED
checking card pile 25
actual: 10
expected: 10
Test: PASSED
checking card pile 26
actual: 10
expected: 10
Test: PASSED

choice 3 trash 2 cards

check cards are not in discardactual: 0
expected: 0
Test: PASSED

check coins
actual: 3
expected: 3
Test: PASSED

check hand
actual: 2
expected: 2
Test: PASSED

check deck
actual: 5
expected: 5
Test: PASSED

TEST SUCCESSFUL
File 'cardtest4.c'
Lines executed:95.12% of 82
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:21.28% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        3:  346:int whoseTurn(struct gameState *state) {
        3:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        7:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        7:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        7:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        7:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        7:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        7:  576:    state->deckCount[player]--;
        7:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        7:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:      shuffle(currentPlayer, state);
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
    #####:  684:}
        -:  685:
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
    #####:  695:}
        -:  696:
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
    #####:  706:}
        -:  707:
        3:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
        3:  709:  if (choice1 == 1) {
        -:  710:    //+2 cards
        1:  711:    drawCard(currentPlayer, state);
        1:  712:    drawCard(currentPlayer, state);
        2:  713:  } else if (choice1 == 2) {
        -:  714:    //+2 coins
        1:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
        1:  718:    discardCard(choice2, currentPlayer, state, 1);
        1:  719:    discardCard(choice2, currentPlayer, state, 1);
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
        3:  723:  discardCard(handPos, currentPlayer, state, 0);
        3:  724:}
        -:  725:
        3:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
        3:  733:  int currentPlayer = whoseTurn(state);
        3:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
        3:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
        3:  738:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
        3:  744:  switch( card ) 
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
    #####:  787:	if (supplyCount(choice1, state) <= 0){
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
    #####:  796:	  printf("That card is too expensive!\n");
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
        3: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        3: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1058:	  drawCard(currentPlayer, state);
    #####: 1059:	  drawCard(currentPlayer, state);
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
    #####: 1204:	if (i != currentPlayer){
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
        5: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
        5: 1250:  if (trashFlag < 1)
        -: 1251:    {
        -: 1252:      //add card to played pile
        3: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
        5: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
        5: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
        5: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
        5: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
        5: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
        5: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
        5: 1281:  return 0;
        -: 1282:}
        -: 1283:
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
File 'cardtest4.c'
Lines executed:95.12% of 82
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
Calls executed:95.08% of 61
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:21.28% of 564
Branches executed:23.74% of 417
Taken at least once:15.11% of 417
Calls executed:14.74% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 30
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 8 (fallthrough)
branch  1 taken 22
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 1
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 1
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 10
branch  1 taken 1 (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 100
branch  1 taken 10 (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90 (fallthrough)
branch  1 taken 10
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 20
branch  1 taken 1 (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 155
branch  1 taken 10 (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 9 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 9
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 14
branch  1 taken 2 (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 27
branch  1 taken 1 (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 5
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 1
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 2
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 20
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       64:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 44
branch  1 taken 20 (fallthrough)
       44:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  346:int whoseTurn(struct gameState *state) {
        3:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 7 returned 100% blocks executed 38%
        7:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        7:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        7:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        7:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        7:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        7:  576:    state->deckCount[player]--;
        7:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        7:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function handleAdventurerCard called 0 returned 0% blocks executed 0%
    #####:  646:void handleAdventurerCard(int currentPlayer, struct gameState *state, int *temphand) {
    #####:  647:  int drawntreasure = 0;
        -:  648:  int cardDrawn;
    #####:  649:  int z = 0;// this is the counter for the temp hand
        -:  650:
    #####:  651:  while (drawntreasure < 2) {
branch  0 never executed
branch  1 never executed
    #####:  652:    if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  653:      shuffle(currentPlayer, state);
call    0 never executed
        -:  654:    }
        -:  655:
    #####:  656:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  657:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    #####:  658:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  659:      drawntreasure++;
        -:  660:    else {
    #####:  661:      temphand[z] = cardDrawn;
    #####:  662:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:      z++;
        -:  664:    }
        -:  665:  }
        -:  666:
    #####:  667:  while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:    z = z - 1;
        -:  670:  }
    #####:  671:}
        -:  672:
function handleSmithy called 0 returned 0% blocks executed 0%
    #####:  673:void handleSmithy(int currentPlayer, struct gameState *state, int handPos) {
    #####:  674:  int i = 0;
        -:  675:
        -:  676:  //+3 Cards
    #####:  677:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
call    0 never executed
        -:  680:  }
        -:  681:
        -:  682:  //discard card from hand
    #####:  683:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  684:}
        -:  685:
function handleVillage called 0 returned 0% blocks executed 0%
    #####:  686:void handleVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  687:  //+1 Card
    #####:  688:  drawCard(currentPlayer, state);
call    0 never executed
        -:  689:
        -:  690:  //+2 Actions
    #####:  691:  state->numActions = state->numActions + 2;
        -:  692:
        -:  693:  //discard played card from hand
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  695:}
        -:  696:
function handleGreatHall called 0 returned 0% blocks executed 0%
    #####:  697:void handleGreatHall(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+1 Card
    #####:  699:  drawCard(currentPlayer, state);
call    0 never executed
        -:  700:
        -:  701:  //+1 Actions
    #####:  702:  state->numActions = +1;
        -:  703:
        -:  704:  //discard card from hand
    #####:  705:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  706:}
        -:  707:
function handleSteward called 3 returned 100% blocks executed 100%
        3:  708:void handleSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
        3:  709:  if (choice1 == 1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  710:    //+2 cards
        1:  711:    drawCard(currentPlayer, state);
call    0 returned 1
        1:  712:    drawCard(currentPlayer, state);
call    0 returned 1
        2:  713:  } else if (choice1 == 2) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  714:    //+2 coins
        1:  715:    state->coins = state->coins + 2;
        -:  716:  } else {
        -:  717:    //trash 2 cards in hand
        1:  718:    discardCard(choice2, currentPlayer, state, 1);
call    0 returned 1
        1:  719:    discardCard(choice2, currentPlayer, state, 1);
call    0 returned 1
        -:  720:  }
        -:  721:
        -:  722:  //discard card from hand
        3:  723:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 3
        3:  724:}
        -:  725:
function cardEffect called 3 returned 100% blocks executed 3%
        3:  726:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  727:{
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
        3:  733:  int currentPlayer = whoseTurn(state);
call    0 returned 3
        3:  734:  int nextPlayer = currentPlayer + 1;
        -:  735:
        3:  736:  int tributeRevealedCards[2] = {-1, -1};
        -:  737:  int temphand[MAX_HAND];// moved above the if statement
        3:  738:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  739:    nextPlayer = 0;
        -:  740:  }
        -:  741:  
        -:  742:	
        -:  743:  //uses switch to select card and perform actions
        3:  744:  switch( card ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 3
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  745:    {
        -:  746:    case adventurer:
    #####:  747:      handleAdventurerCard(currentPlayer, state, temphand);
call    0 never executed
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
call    0 never executed
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  787:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
    #####:  892:      handleSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case village:
    #####:  896:      handleVillage(currentPlayer, state, handPos);
call    0 never executed
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
    #####:  900:      state->numBuys++;//Increase buys by 1!
    #####:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  902:	int p = 0;//Iterator for hand!
    #####:  903:	int card_not_discarded = 1;//Flag for discard set!
    #####:  904:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  908:	    state->discardCount[currentPlayer]++;
    #####:  909:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
    #####:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  913:	    state->handCount[currentPlayer]--;
    #####:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  925:		isGameOver(state);
call    0 never executed
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:	    isGameOver(state);
call    0 never executed
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      handleGreatHall(currentPlayer, state, handPos);
call    0 never executed
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  995:			{
    #####:  996:			  drawCard(i, state);
call    0 never executed
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
        3: 1006:      handleSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
call    0 returned 3
        3: 1007:      return 0;
        -: 1008:		
        -: 1009:    case tribute:
    #####: 1010:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1011:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1012:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1013:	  state->deckCount[nextPlayer]--;
        -: 1014:	}
    #####: 1015:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1017:	  state->discardCount[nextPlayer]--;
        -: 1018:	}
        -: 1019:	else{
        -: 1020:	  //No Card to Reveal
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("No cards to reveal\n");
        -: 1023:	  }
        -: 1024:	}
        -: 1025:      }
        -: 1026:	    
        -: 1027:      else{
    #####: 1028:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1030:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1031:	    state->deckCount[nextPlayer]++;
    #####: 1032:	    state->discard[nextPlayer][i] = -1;
    #####: 1033:	    state->discardCount[nextPlayer]--;
        -: 1034:	  }
        -: 1035:			    
    #####: 1036:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1037:	} 
    #####: 1038:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1039:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1040:	state->deckCount[nextPlayer]--;
    #####: 1041:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1043:	state->deckCount[nextPlayer]--;
        -: 1044:      }    
        -: 1045:		       
    #####: 1046:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1047:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1048:	state->playedCardCount++;
    #####: 1049:	tributeRevealedCards[1] = -1;
        -: 1050:      }
        -: 1051:
    #####: 1052:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1054:	  state->coins += 2;
        -: 1055:	}
        -: 1056:		    
    #####: 1057:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1058:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1059:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1060:	}
        -: 1061:	else{//Action Card
    #####: 1062:	  state->numActions = state->numActions + 2;
        -: 1063:	}
        -: 1064:      }
        -: 1065:	    
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case ambassador:
    #####: 1069:      j = 0;		//used to check if player has enough cards to discard
        -: 1070:
    #####: 1071:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
    #####: 1076:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  return -1;
        -: 1079:	}
        -: 1080:
    #####: 1081:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1084:	    {
    #####: 1085:	      j++;
        -: 1086:	    }
        -: 1087:	}
    #####: 1088:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  return -1;				
        -: 1091:	}
        -: 1092:
        -: 1093:      if (DEBUG) 
        -: 1094:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1095:
        -: 1096:      //increase supply count for choosen card by amount being discarded
    #####: 1097:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1098:			
        -: 1099:      //each other player gains a copy of revealed card
    #####: 1100:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1103:	    {
    #####: 1104:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1105:	    }
        -: 1106:	}
        -: 1107:
        -: 1108:      //discard played card from hand
    #####: 1109:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1110:
        -: 1111:      //trash copies of cards returned to supply
    #####: 1112:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1119:		  break;
        -: 1120:		}
        -: 1121:	    }
        -: 1122:	}			
        -: 1123:
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case cutpurse:
        -: 1127:
    #####: 1128:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1134:		{
    #####: 1135:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1136:		    {
    #####: 1137:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1138:		      break;
        -: 1139:		    }
    #####: 1140:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1141:		    {
    #####: 1142:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
        -: 1144:			  if (DEBUG)
        -: 1145:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1146:			}	
    #####: 1147:		      break;
        -: 1148:		    }		
        -: 1149:		}
        -: 1150:					
        -: 1151:	    }
        -: 1152:				
        -: 1153:	}				
        -: 1154:
        -: 1155:      //discard played card from hand
    #####: 1156:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1157:
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:		
        -: 1161:    case embargo: 
        -: 1162:      //+2 Coins
    #####: 1163:      state->coins = state->coins + 2;
        -: 1164:			
        -: 1165:      //see if selected pile is in play
    #####: 1166:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1167:	{
    #####: 1168:	  return -1;
        -: 1169:	}
        -: 1170:			
        -: 1171:      //add embargo token to selected supply pile
    #####: 1172:      state->embargoTokens[choice1]++;
        -: 1173:			
        -: 1174:      //trash card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case outpost:
        -: 1179:      //set outpost flag
    #####: 1180:      state->outpostPlayed++;
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case salvager:
        -: 1187:      //+1 buy
    #####: 1188:      state->numBuys++;
        -: 1189:			
    #####: 1190:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1191:	{
        -: 1192:	  //gain coins equal to trashed card
    #####: 1193:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1194:	  //trash card
    #####: 1195:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1196:	}
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case sea_hag:
    #####: 1203:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1204:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1205:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1206:	  state->discardCount[i]++;
    #####: 1207:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1208:	}
        -: 1209:      }
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case treasure_map:
        -: 1213:      //search hand for another treasure_map
    #####: 1214:      index = -1;
    #####: 1215:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
    #####: 1217:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1218:	    {
    #####: 1219:	      index = i;
    #####: 1220:	      break;
        -: 1221:	    }
        -: 1222:	}
    #####: 1223:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
        -: 1225:	  //trash both treasure cards
    #####: 1226:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1227:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1228:
        -: 1229:	  //gain 4 Gold cards
    #####: 1230:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	    {
    #####: 1232:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1233:	    }
        -: 1234:				
        -: 1235:	  //return success
    #####: 1236:	  return 1;
        -: 1237:	}
        -: 1238:			
        -: 1239:      //no second treasure_map found in hand
    #####: 1240:      return -1;
        -: 1241:    }
        -: 1242:	
    #####: 1243:  return -1;
        -: 1244:}
        -: 1245:
function discardCard called 5 returned 100% blocks executed 78%
        5: 1246:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1247:{
        -: 1248:	
        -: 1249:  //if card is not trashed, added to Played pile 
        5: 1250:  if (trashFlag < 1)
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        -: 1251:    {
        -: 1252:      //add card to played pile
        3: 1253:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1254:      state->playedCardCount++;
        -: 1255:    }
        -: 1256:	
        -: 1257:  //set played card to -1
        5: 1258:  state->hand[currentPlayer][handPos] = -1;
        -: 1259:	
        -: 1260:  //remove card from player's hand
        5: 1261:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
        5: 1266:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        -: 1271:  else 	
        -: 1272:    {
        -: 1273:      //replace discarded card with last card in hand
        5: 1274:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1275:      //set last card to -1
        5: 1276:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1277:      //reduce number of cards in hand
        5: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:	
        5: 1281:  return 0;
        -: 1282:}
        -: 1283:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1284:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1285:{
        -: 1286:  //Note: supplyPos is enum of choosen card
        -: 1287:	
        -: 1288:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1289:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1290:    {
    #####: 1291:      return -1;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //added card for [whoseTurn] current player:
        -: 1295:  // toFlag = 0 : add to discard
        -: 1296:  // toFlag = 1 : add to deck
        -: 1297:  // toFlag = 2 : add to hand
        -: 1298:
    #####: 1299:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1300:    {
    #####: 1301:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1302:      state->deckCount[player]++;
        -: 1303:    }
    #####: 1304:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1305:    {
    #####: 1306:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1307:      state->handCount[player]++;
        -: 1308:    }
        -: 1309:  else
        -: 1310:    {
    #####: 1311:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1312:      state->discardCount[player]++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //decrease number in supply pile
    #####: 1316:  state->supplyCount[supplyPos]--;
        -: 1317:	 
    #####: 1318:  return 0;
        -: 1319:}
        -: 1320:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1321:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1322:{
        -: 1323:  int i;
        -: 1324:	
        -: 1325:  //reset coin count
        1: 1326:  state->coins = 0;
        -: 1327:
        -: 1328:  //add coins for each Treasure card in player's hand
        6: 1329:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        -: 1330:    {
        5: 1331:      if (state->hand[player][i] == copper)
branch  0 taken 3 (fallthrough)
branch  1 taken 2
        -: 1332:	{
        3: 1333:	  state->coins += 1;
        -: 1334:	}
        2: 1335:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1336:	{
    #####: 1337:	  state->coins += 2;
        -: 1338:	}
        2: 1339:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1340:	{
    #####: 1341:	  state->coins += 3;
        -: 1342:	}	
        -: 1343:    }	
        -: 1344:
        -: 1345:  //add bonus
        1: 1346:  state->coins += bonus;
        -: 1347:
        1: 1348:  return 0;
        -: 1349:}
        -: 1350:
        -: 1351:
        -: 1352://end of dominion.c
